{"version":3,"file":"static/preview.4a29f9028547a192f989.bundle.js","sources":["webpack:///src/component/pado-slider.vue"],"sourcesContent":["<template>\n  <div class=\"pado-slider\">\n    <div class=\"pado-slider-scrollbar\"></div>\n    <div class=\"pado-slider-scroller\"></div>\n  </div>\n</template>\n<script>\nimport PadoSlider from '../component/pado-slider.vue';\nimport $ from '../../../../.src/web/plugins/jquery';\nimport { dragHelper } from '../../../../.src/web/index';\nimport { limitOf, domainRangeValue } from '../../../../.src/functions';\n\n\nexport default {\n  props: {\n    value:{\n      default:0\n    },\n    maxValue:{\n      default:100\n    },\n    minValue:{\n      default:0\n    }\n  },\n  computed:{\n    bindValue (){\n      return parseInt(this.value,10);\n    },\n    bindMaxValue(){\n      return parseInt(this.maxValue,10);\n    },\n    bindMinValue(){\n      return parseInt(this.minValue,10);\n    },\n    readOnly(){\n      return typeof this.$el.getAttribute(\"readOnly\") === \"string\";\n    }\n  },\n  mounted (){\n    const $element = $(this.$el);\n    const $scrollbar = $element.find('.pado-slider-scrollbar');\n    const $scroller  = $element.find('.pado-slider-scroller');\n    \n    this.$on(\"drawInput\",(value)=>{\n      const modelValue   = typeof value === \"number\" ? value : this.bindValue;\n      const barLength    = $scrollbar.width()-$scroller.width();\n      const leftPosition = domainRangeValue([this.bindMinValue,this.bindMaxValue],[0,barLength],modelValue);\n      $scroller.css(\"left\",leftPosition);\n    });\n    \n    (typeof this.bindValue !== \"undefined\" || !this.bindValue === 0) && this.$emit(\"drawInput\",parseInt(this.bindValue,10))\n    \n    this.$watch(\"value\",(newValue)=>{\n      this.$emit(\"drawInput\",newValue);\n    });\n    \n    this.windowResizeHandle = ()=>{\n      this.$emit(\"drawInput\");\n    };\n    \n    $(window).on(\"resize\",this.windowResizeHandle);\n    \n    dragHelper($scrollbar,({ element })=>{\n      $scroller.css(\"pointer-events\",\"none\");\n      let finalValue;\n      return {\n        \"start, move\":({ event })=>{\n          if(this.readOnly){\n            event.preventDefault();\n          }\n          \n          let { left, width } = $scroller.predict({center:event}, element);\n          const barLength     = element.width() - width;\n          const leftValue     = limitOf(left,barLength);\n          finalValue = domainRangeValue([0, barLength],[this.bindMinValue,this.bindMaxValue],leftValue);\n          this.$emit(\"drawInput\",Math.round(finalValue));\n        },\n        end:({ pointer })=>{\n          const endValue = Math.round(typeof finalValue === \"number\" ? finalValue : this.bindValue);\n          this.$emit(\"input\",endValue);\n        }\n      }\n    });\n  },\n  destroyed (){\n    $(window).off(\"resize\",this.windowResizeHandle)\n  }\n}\n</script>"],"mappings":"AAaA","sourceRoot":""}