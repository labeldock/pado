{"version":3,"sources":["../.src/modules/matrix.js"],"names":["MatrixArray","data","column","row","forEach","push","datum","Object","defineProperties","enumerable","value","prototype","assign","toString","toMatrix","eachResultHook","result","undefined","index","colIndex","rowIndex","dataResult","eachColumn","eachFn","rows","columns","colData","map","eachRow","multiply","makeMatrixArray","eachHook","matrixProto","matrixArray"],"mappings":"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","sourcesContent":["import { asArray } from '../functions/cast';\nimport { times } from '../functions/enumerable';\nimport { turnTime } from '../functions/nice';\n\nexport const MatrixArray = (function(){\n  const MatrixArray = function(data, column, row){\n    asArray(data).forEach(datum=>{ this.push(datum); });\n    \n    Object.defineProperties(this,{\n      column:{\n        enumerable:false,\n        value:column\n      },\n      row:{\n        enumerable:false,\n        value:row\n      }\n    });\n    \n  };\n\n  MatrixArray.prototype = Object.assign([],{\n    toString (){\n      return \"[object Array]\";\n    },\n    toMatrix (eachResultHook){\n      const result = [];\n      eachResultHook = typeof eachResultHook === \"function\" ? eachResultHook : undefined;\n\n      times(this.column * this.row,(index)=>{\n        const [ colIndex, rowIndex ] = turnTime(index, this.column);\n        const data       = this[index];\n        const dataResult = eachResultHook ? eachResultHook(data,index,colIndex,rowIndex) : data;\n        if(!result[rowIndex]) result[rowIndex] = [];\n        result[rowIndex].push(dataResult);\n      });\n      \n      return result;\n    },\n    eachColumn (eachFn){\n      const rows = this.toMatrix();\n      const columns = times(this.column, colIndex=>{\n        const colData = [];\n        rows.forEach(row=>colData.push(row[colIndex]));\n        return colData;\n      });\n      \n      return typeof eachFn === \"function\" ? columns.map(eachFn) : columns;\n    },\n    eachRow (eachFn){\n      const rows = this.toMatrix();\n      return typeof eachFn === \"function\" ? rows.map(eachFn) : rows;\n    },\n    multiply (){\n      //TODO\n    }\n  });\n  \n  return MatrixArray;\n})();\n\nexport const makeMatrixArray = function(column,row,eachHook){\n  const matrixProto = times(column * row,(index)=>{\n    const [ colIndex, rowIndex ] = turnTime(index, column);\n    return eachHook(index, colIndex, rowIndex) || [colIndex, rowIndex];\n  });\n  \n  const matrixArray = new MatrixArray(matrixProto,column,row);\n  return matrixArray;\n};"],"file":"matrix.js"}