{"version":3,"sources":["../.src/modules/matrix.js"],"names":["MatrixArray","data","column","row","forEach","push","datum","Object","defineProperties","enumerable","value","length","prototype","assign","toMatrix","eachResultHook","result","undefined","index","colIndex","rowIndex","dataResult","toArray","Array","from","eachColumn","eachFn","rows","columns","colData","map","eachRow","multiply","makeMatrixArray","eachHook","matrixProto","matrixArray"],"mappings":"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","sourcesContent":["import { asArray } from '../functions/cast'\nimport { times } from '../functions/enumerable'\nimport { turnTime } from '../functions/nice'\n\nexport const MatrixArray = (function (){\n  const MatrixArray = function (data, column, row){\n    asArray(data).forEach(datum=>{ this.push(datum) })\n    \n    Object.defineProperties(this, {\n      column: {\n        enumerable: false,\n        value     : column\n      },\n      row: {\n        enumerable: false,\n        value     : row\n      },\n      length: {\n        enumerable: false\n      }\n    })\n  }\n\n  MatrixArray.prototype = Object.assign([], {\n    toMatrix (eachResultHook){\n      const result = []\n      eachResultHook = typeof eachResultHook === \"function\" ? eachResultHook : undefined\n\n      times(this.column * this.row, (index)=>{\n        const [ colIndex, rowIndex ] = turnTime(index, this.column)\n        const data       = this[index]\n        const dataResult = eachResultHook ? eachResultHook(data, index, colIndex, rowIndex) : data\n        if(!result[rowIndex]) result[rowIndex] = []\n        result[rowIndex].push(dataResult)\n      })\n      \n      return result\n    },\n    toArray (){\n      return Array.from(this)\n    },\n    eachColumn (eachFn){\n      const rows = this.toMatrix()\n      const columns = times(this.column, colIndex=>{\n        const colData = []\n        rows.forEach(row=>colData.push(row[colIndex]))\n        return colData\n      })\n      \n      return typeof eachFn === \"function\" ? columns.map(eachFn) : columns\n    },\n    eachRow (eachFn){\n      const rows = this.toMatrix()\n      return typeof eachFn === \"function\" ? rows.map(eachFn) : rows\n    },\n    multiply (){\n      //TODO\n    }\n  })\n  \n  return MatrixArray\n})()\n\nexport const makeMatrixArray = function (column, row, eachHook){\n  const matrixProto = times(column * row, (index)=>{\n    const [ colIndex, rowIndex ] = turnTime(index, column)\n    return eachHook(index, colIndex, rowIndex) || [colIndex, rowIndex]\n  })\n  \n  const matrixArray = new MatrixArray(matrixProto, column, row)\n  return matrixArray\n}\n"],"file":"matrix.js"}