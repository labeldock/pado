{"version":3,"sources":["../.src/modules/ranger.js"],"names":["Limitter","max","min","value","maximum","Number","POSITIVE_INFINITY","minimum","LimitterPrototype","expectIn","setValue","expectOut","addExpectIn","addValue","destValue","addExpectOut","set","add","Object","defineProperties","done","get","prototype","ranger"],"mappings":";;;;;;;;;;;;;;;;;;;;AAEO,MAAMA,WAAW,SAAXA,QAAW,CAAUC,GAAV,EAAeC,GAAf,EAAmB;AACzC,SAAKC,KAAL,GAAa,CAAb;;AACA,QAAG,OAAOF,GAAP,KAAe,QAAf,IAA2B,8BAAcC,GAAd,CAA9B,EAAiD;AAC/C,WAAKE,OAAL,GAAeC,OAAOC,iBAAtB;AACD,KAFD,MAEO;AACL,WAAKF,OAAL,GAAeH,GAAf;AACD;;AACD,QAAG,OAAOC,GAAP,KAAe,QAAf,IAA2B,8BAAcA,GAAd,CAA9B,EAAiD;AAC/C,WAAKK,OAAL,GAAe,CAAf;AACD,KAFD,MAEO;AACL,WAAKA,OAAL,GAAeL,GAAf;AACD;AACF,GAZM;;;AAcP,MAAMM,oBAAoB;AACxBC,YADwB,oBACdC,QADc,EACL;AACjB,aAAOA,aAAa,4BAAYA,QAAZ,EAAsB,KAAKN,OAA3B,EAAoC,KAAKG,OAAzC,CAApB;AACD,KAHuB;AAIxBI,aAJwB,qBAIbD,QAJa,EAIJ;AAClB,aAAOA,aAAa,4BAAYA,QAAZ,EAAsB,KAAKN,OAA3B,EAAoC,KAAKG,OAAzC,CAApB;AACD,KANuB;AAOxBK,iBAAa,qBAAUC,QAAV,EAAmB;AAC9B,UAAMC,YAAY,KAAKX,KAAL,GAAaU,QAA/B;AACA,aAAOC,cAAc,4BAAYA,SAAZ,EAAuB,KAAKV,OAA5B,EAAqC,KAAKG,OAA1C,CAArB;AACD,KAVuB;AAWxBQ,kBAAc,sBAAUF,QAAV,EAAmB;AAC/B,UAAMC,YAAY,KAAKX,KAAL,GAAaU,QAA/B;AACA,aAAOC,cAAc,4BAAYA,SAAZ,EAAuB,KAAKV,OAA5B,EAAqC,KAAKG,OAA1C,CAArB;AACD,KAduB;AAexBS,SAAK,aAAUN,QAAV,EAAmB;AACtB,WAAKP,KAAL,GAAaO,QAAb;AACA,aAAO,IAAP;AACD,KAlBuB;AAmBxBO,SAAK,aAAUJ,QAAV,EAAmB;AACtB,WAAKV,KAAL,GAAa,KAAKA,KAAL,GAAaU,QAA1B;AACA,aAAO,IAAP;AACD;AAtBuB,GAA1B;AAyBAK,SAAOC,gBAAP,CAAwBX,iBAAxB,EAA2C;AACzCY,UAAM;AACJC,SADI,iBACE;AACJ,eAAO,KAAKlB,KAAL,KAAe,4BAAY,KAAKA,KAAjB,EAAwB,KAAKC,OAA7B,EAAsC,KAAKG,OAA3C,CAAtB;AACD;AAHG;AADmC,GAA3C;AAQAP,WAASsB,SAAT,GAAqBd,iBAArB;;AAEO,MAAMe,SAAS,SAATA,MAAS,CAAUtB,GAAV,EAAeC,GAAf,EAAmB;AACvC,WAAO,IAAIF,QAAJ,CAAaC,GAAb,EAAkBC,GAAlB,CAAP;AACD,GAFM","sourcesContent":["import { limitNumber, isAbsoluteNaN } from \"../functions\"\n\nexport const Limitter = function (max, min){\n  this.value = 0\n  if(typeof max !== \"number\" || isAbsoluteNaN(min)){\n    this.maximum = Number.POSITIVE_INFINITY\n  } else {\n    this.maximum = max\n  }\n  if(typeof min !== \"number\" || isAbsoluteNaN(min)){\n    this.minimum = 0\n  } else {\n    this.minimum = min\n  }\n}\n\nconst LimitterPrototype = {\n  expectIn (setValue){\n    return setValue === limitNumber(setValue, this.maximum, this.minimum)\n  },\n  expectOut (setValue){\n    return setValue !== limitNumber(setValue, this.maximum, this.minimum)\n  },\n  addExpectIn: function (addValue){\n    const destValue = this.value + addValue\n    return destValue === limitNumber(destValue, this.maximum, this.minimum)\n  },\n  addExpectOut: function (addValue){\n    const destValue = this.value + addValue\n    return destValue !== limitNumber(destValue, this.maximum, this.minimum)\n  },\n  set: function (setValue){\n    this.value = setValue\n    return this\n  },\n  add: function (addValue){\n    this.value = this.value + addValue\n    return this\n  }\n}\n\nObject.defineProperties(LimitterPrototype, {\n  done: {\n    get (){\n      return this.value === limitNumber(this.value, this.maximum, this.minimum)\n    }\n  }\n})\n\nLimitter.prototype = LimitterPrototype\n\nexport const ranger = function (max, min){\n  return new Limitter(max, min)\n}\n"],"file":"ranger.js"}