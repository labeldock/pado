{"version":3,"sources":["../.src/modules/ranger.js"],"names":["Limitter","max","min","value","maximum","Number","POSITIVE_INFINITY","minimum","LimitterPrototype","expectIn","setValue","expectOut","addExpectIn","addValue","destValue","addExpectOut","set","add","Object","defineProperties","done","get","prototype","ranger"],"mappings":";;;;;;;;;;;;;;;;;;;;AAEO,MAAMA,WAAW,SAAXA,QAAW,CAASC,GAAT,EAAaC,GAAb,EAAiB;AACvC,SAAKC,KAAL,GAAa,CAAb;;AACA,QAAG,OAAOF,GAAP,KAAe,QAAf,IAA2B,8BAAcC,GAAd,CAA9B,EAAiD;AAC/C,WAAKE,OAAL,GAAeC,OAAOC,iBAAtB;AACD,KAFD,MAEO;AACL,WAAKF,OAAL,GAAeH,GAAf;AACD;;AACD,QAAG,OAAOC,GAAP,KAAe,QAAf,IAA2B,8BAAcA,GAAd,CAA9B,EAAiD;AAC/C,WAAKK,OAAL,GAAe,CAAf;AACD,KAFD,MAEO;AACL,WAAKA,OAAL,GAAeL,GAAf;AACD;AACF,GAZM;;;AAcP,MAAMM,oBAAoB;AACxBC,YADwB,oBACdC,QADc,EACL;AACjB,aAAOA,aAAa,wBAAQA,QAAR,EAAiB,KAAKN,OAAtB,EAA8B,KAAKG,OAAnC,CAApB;AACD,KAHuB;AAIxBI,aAJwB,qBAIdD,QAJc,EAIL;AACjB,aAAOA,aAAa,wBAAQA,QAAR,EAAiB,KAAKN,OAAtB,EAA8B,KAAKG,OAAnC,CAApB;AACD,KANuB;AAOxBK,iBAAY,qBAASC,QAAT,EAAkB;AAC5B,UAAMC,YAAY,KAAKX,KAAL,GAAaU,QAA/B;AACA,aAAOC,cAAc,wBAAQA,SAAR,EAAkB,KAAKV,OAAvB,EAA+B,KAAKG,OAApC,CAArB;AACD,KAVuB;AAWxBQ,kBAAa,sBAASF,QAAT,EAAkB;AAC7B,UAAMC,YAAY,KAAKX,KAAL,GAAaU,QAA/B;AACA,aAAOC,cAAc,wBAAQA,SAAR,EAAkB,KAAKV,OAAvB,EAA+B,KAAKG,OAApC,CAArB;AACD,KAduB;AAexBS,SAAI,aAASN,QAAT,EAAkB;AACpB,WAAKP,KAAL,GAAaO,QAAb;AACA,aAAO,IAAP;AACD,KAlBuB;AAmBxBO,SAAI,aAASJ,QAAT,EAAkB;AACpB,WAAKV,KAAL,GAAa,KAAKA,KAAL,GAAaU,QAA1B;AACA,aAAO,IAAP;AACD;AAtBuB,GAA1B;AAyBAK,SAAOC,gBAAP,CAAwBX,iBAAxB,EAA0C;AACxCY,UAAK;AACHC,SADG,iBACG;AACJ,eAAO,KAAKlB,KAAL,KAAe,wBAAQ,KAAKA,KAAb,EAAmB,KAAKC,OAAxB,EAAgC,KAAKG,OAArC,CAAtB;AACD;AAHE;AADmC,GAA1C;AAQAP,WAASsB,SAAT,GAAqBd,iBAArB;;AAEO,MAAMe,SAAS,SAATA,MAAS,CAAStB,GAAT,EAAaC,GAAb,EAAiB;AACrC,WAAO,IAAIF,QAAJ,CAAaC,GAAb,EAAiBC,GAAjB,CAAP;AACD,GAFM","sourcesContent":["import { isNumber, limitOf, isAbsoluteNaN } from \"../functions\";\n\nexport const Limitter = function(max,min){\n  this.value = 0;\n  if(typeof max !== \"number\" || isAbsoluteNaN(min)){\n    this.maximum = Number.POSITIVE_INFINITY;\n  } else {\n    this.maximum = max;\n  }\n  if(typeof min !== \"number\" || isAbsoluteNaN(min)){\n    this.minimum = 0;\n  } else {\n    this.minimum = min;\n  }\n};\n\nconst LimitterPrototype = {\n  expectIn (setValue){\n    return setValue === limitOf(setValue,this.maximum,this.minimum);\n  },\n  expectOut(setValue){\n    return setValue !== limitOf(setValue,this.maximum,this.minimum);\n  },\n  addExpectIn:function(addValue){\n    const destValue = this.value + addValue;\n    return destValue === limitOf(destValue,this.maximum,this.minimum);\n  },\n  addExpectOut:function(addValue){\n    const destValue = this.value + addValue;\n    return destValue !== limitOf(destValue,this.maximum,this.minimum);\n  },\n  set:function(setValue){\n    this.value = setValue;\n    return this;\n  },\n  add:function(addValue){\n    this.value = this.value + addValue;\n    return this;\n  }\n};\n\nObject.defineProperties(LimitterPrototype,{\n  done:{\n    get (){\n      return this.value === limitOf(this.value,this.maximum,this.minimum);\n    }\n  }\n});\n\nLimitter.prototype = LimitterPrototype;\n\nexport const ranger = function(max,min){\n  return new Limitter(max,min);\n};"],"file":"ranger.js"}