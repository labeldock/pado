{"version":3,"sources":["../.src/modules/session.js"],"names":["SESSION_STORE","STATE_STORE","session","name","inst","outputs","map","e","output","open","fn","close","result","Promise","all","spawn","payload","Error","input","promise","valueOf","managedSpawn","undefined","item","then","deferred","defer","deferPromise","push","resolve","reject"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA,MAAMA,aAAa,GAAG,EAAtB;AACA,MAAMC,WAAW,GAAK,EAAtB;AAEA;;;;;;;;;;;;;AAaO,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAAUC,IAAV,EAAe;AACpC,QAAMC,IAAI,GAAG;AACXC,MAAAA,OAAO,EAAE;AAAA,eAAIJ,WAAW,CAACE,IAAD,CAAX,CAAkBG,GAAlB,CAAsB,UAAAC,CAAC;AAAA,iBAAEA,CAAC,CAACC,MAAJ;AAAA,SAAvB,CAAJ;AAAA,OADE;AAEXC,MAAAA,IAAI,EAAK,cAACC,EAAD,EAAM;AACbV,QAAAA,aAAa,CAACG,IAAD,CAAb,GAAsBO,EAAtB;AACAT,QAAAA,WAAW,CAACE,IAAD,CAAX,GAAoB,EAApB;AACD,OALU;AAMXQ,MAAAA,KAAK,EAAE,iBAAI;AACT,YAAMC,MAAM,GAAGR,IAAI,CAACC,OAAL,EAAf;AACA,eAAOL,aAAa,CAACG,IAAD,CAApB;AACA,eAAOF,WAAW,CAACE,IAAD,CAAlB;AACA,eAAOU,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAAP;AACD,OAXU;AAYXG,MAAAA,KAAK,EAAE,eAACC,OAAD,EAAW;AAChB,YAAG,OAAOhB,aAAa,CAACG,IAAD,CAApB,KAA+B,UAAlC,EAA6C;AAC3C,cAAG,CAACH,aAAa,CAACG,IAAD,CAAjB,EAAwB;AACtB,kBAAM,IAAIc,KAAJ,gBAAuBd,IAAvB,qBAAN;AACD,WAFD,MAEO;AACL,kBAAM,IAAIc,KAAJ,gBAAuBd,IAAvB,+BAAN;AACD;AACF;;AAED,YAAMe,KAAK,GAAGC,iBAAQC,OAAR,CAAgBpB,aAAa,CAACG,IAAD,CAAb,CAAoBa,OAApB,CAAhB,CAAd;;AACA,YAAMK,YAAY,GAAG;AACnBH,UAAAA,KAAK,EAALA,KADmB;AAEnBV,UAAAA,MAAM,EAAEc,SAFW;AAGnBC,UAAAA,IAAI,EAAID;AAHW,SAArB;AAMA,eAAOJ,KAAK,CAACM,IAAN,CAAW,UAACD,IAAD,EAAQ;AACxB,cAAME,QAAQ,GAAQN,iBAAQO,KAAR,EAAtB;;AACA,cAAMC,YAAY,GAAIF,QAAQ,CAACN,OAA/B;AACAE,UAAAA,YAAY,CAACb,MAAb,GAAsBmB,YAAtB;AACAN,UAAAA,YAAY,CAACE,IAAb,GAAoBA,IAApB;AAEAtB,UAAAA,WAAW,CAACE,IAAD,CAAX,CAAkByB,IAAlB,CAAuBP,YAAvB;AAEA,iBAAO;AACLE,YAAAA,IAAI,EAAJA,IADK;AAELM,YAAAA,OAAO,EAAEJ,QAAQ,CAACI,OAFb;AAGLC,YAAAA,MAAM,EAAGL,QAAQ,CAACK;AAHb,WAAP;AAKD,SAbM,CAAP;AAcD;AA1CU,KAAb;AA6CA,WAAO1B,IAAP;AACD,GA/CM","sourcesContent":["import { promise } from './promise'\n\nconst SESSION_STORE = {}\nconst STATE_STORE   = {}\n\n/*\nlet idx = 0;\nsession(\"scopeName\").open((name)=>{ id:idx++, name });\n\nlet { item, resolve } = await session(\"scopeName\").spawn(\"bob\");\nresolve(item);\n\nlet { item, resolve } = await session(\"scopeName\").spawn(\"cat\");\nresolve(item);\n\nsession(\"scopeName\").close()\n*/\n\nexport const session = function (name){\n  const inst = {\n    outputs: ()=>STATE_STORE[name].map(e=>e.output),\n    open   : (fn)=>{\n      SESSION_STORE[name] = fn\n      STATE_STORE[name] = []\n    },\n    close: ()=>{\n      const result = inst.outputs()\n      delete SESSION_STORE[name]\n      delete STATE_STORE[name]\n      return Promise.all(result)\n    },\n    spawn: (payload)=>{\n      if(typeof SESSION_STORE[name] !== \"function\"){\n        if(!SESSION_STORE[name]){\n          throw new Error(`session:: ${name} is not defined`)\n        } else {\n          throw new Error(`session:: ${name} is not function callback`)\n        }\n      }\n      \n      const input = promise.valueOf(SESSION_STORE[name](payload))\n      const managedSpawn = {\n        input,\n        output: undefined,\n        item  : undefined\n      }\n      \n      return input.then((item)=>{\n        const deferred      = promise.defer()\n        const deferPromise  = deferred.promise\n        managedSpawn.output = deferPromise\n        managedSpawn.item = item\n        \n        STATE_STORE[name].push(managedSpawn)\n        \n        return { \n          item,\n          resolve: deferred.resolve,\n          reject : deferred.reject\n        }\n      })\n    }\n  }\n  \n  return inst\n}\n"],"file":"session.js"}