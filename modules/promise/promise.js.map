{"version":3,"sources":["../../packages/pado/modules/promise/promise.js"],"names":["defer","resolve","reject","promise","PromiseClass","arguments","PromiseFunction","timeout","fn","time","setTimeout","valueOf","maybeQ","then","catch"],"mappings":";;;;;;;;;;;;;;;;;;;;AAGO,MAAMA,KAAK,GAAG,SAARA,KAAQ,GAAW;AAC9B,QAAIC,OAAJ,EAAaC,MAAb;AACA,QAAIC,OAAO,GAAG,IAAIC,2BAAJ,CAAiB,YAAW;AACxCH,MAAAA,OAAO,GAAGI,SAAS,CAAC,CAAD,CAAnB;AACAH,MAAAA,MAAM,GAAGG,SAAS,CAAC,CAAD,CAAlB;AACD,KAHa,CAAd;AAIA,WAAO;AACLJ,MAAAA,OAAO,EAAEA,OADJ;AAELC,MAAAA,MAAM,EAAGA,MAFJ;AAGLC,MAAAA,OAAO,EAAEA;AAHJ,KAAP;AAKD,GAXM;;;AAaPG,yBAAgBN,KAAhB,GAAwBA,KAAxB;;AAEO,MAAMO,OAAO,GAAG,SAAVA,OAAU,CAAUC,EAAV,EAAcC,IAAd,EAAmB;AACxC,QAAG,OAAOD,EAAP,KAAc,QAAjB,EAA0B;AACxB,aAAO,+BAAW,UAAAP,OAAO;AAAA,eAAES,UAAU,CAAC;AAAA,iBAAIT,OAAO,CAACQ,IAAD,CAAX;AAAA,SAAD,EAAoBD,EAApB,CAAZ;AAAA,OAAlB,CAAP;AACD,KAFD,MAEO;AACL,aAAO,+BAAW,UAAAP,OAAO;AAAA,eAAES,UAAU,CAAC;AAAA,iBAAIT,OAAO,CAAC,OAAOO,EAAP,KAAc,UAAd,GAA2BA,EAAE,EAA7B,GAAkCA,EAAnC,CAAX;AAAA,SAAD,EAAoDC,IAApD,CAAZ;AAAA,OAAlB,CAAP;AACD;AACF,GANM;;;AAOPH,yBAAgBC,OAAhB,GAA0BA,OAA1B;;AAEO,MAAMI,OAAO,GAAG,SAAVA,OAAU,CAAUC,MAAV,EAAiB;AACtC,WAAO,+BAAW,UAAUX,OAAV,EAAmBC,MAAnB,EAA0B;AAC1C,kCAAYU,MAAZ,IACIA,MAAM,CAACC,IAAP,CAAYZ,OAAZ,EAAqBa,KAArB,CAA2BZ,MAA3B,CADJ,GAEID,OAAO,CAACW,MAAD,CAFX;AAGD,KAJM,CAAP;AAKD,GANM;;;AAOPN,yBAAgBK,OAAhB,GAA0BA,OAA1B;AAEO,MAAMR,OAAO,GAAGG,sBAAhB","sourcesContent":["import { promise as PromiseFunction, newPromise, PromiseClass } from './promiseEngine'\nimport { likePromise } from '../../functions'\n\nexport const defer = function (){\n  var resolve, reject\n  var promise = new PromiseClass(function (){\n    resolve = arguments[0]\n    reject = arguments[1]\n  })\n  return {\n    resolve: resolve,\n    reject : reject,\n    promise: promise\n  }\n}\n\nPromiseFunction.defer = defer\n\nexport const timeout = function (fn, time){\n  if(typeof fn === \"number\"){\n    return newPromise(resolve=>setTimeout(()=>resolve(time), fn))\n  } else {\n    return newPromise(resolve=>setTimeout(()=>resolve(typeof fn === \"function\" ? fn() : fn), time))\n  }\n}\nPromiseFunction.timeout = timeout\n\nexport const valueOf = function (maybeQ){\n  return newPromise(function (resolve, reject){\n    likePromise(maybeQ)\n      ? maybeQ.then(resolve).catch(reject)\n      : resolve(maybeQ) \n  })\n}\nPromiseFunction.valueOf = valueOf\n\nexport const promise = PromiseFunction\n"],"file":"promise.js"}