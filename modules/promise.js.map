{"version":3,"sources":["../.src/modules/promise.js"],"names":["PromiseClass","Promise","resolveFn","resolve","rejectFn","reject","newPromise","fn","r","c","maybeAwaiter","then","catch","promise","PromiseFunction","all","timeout","time","setTimeout","valueOf","maybeQ","abortMessage","Object","defineProperty","get","abort","notifyConsole","undefined","console","warn","defer","arguments","promisify","asyncErrCallbackfn","argumentNames","slice","promisified","args","Array","from","apply","concat","err","error","callbakArgs","length","reduce","dest","name","index","until","tasks","option","Error","some","e","finished","limit","parseInt","taskLength","wheelTick","resetScope","nextWheelTick","tick","value","tickScope","nowAction","isActiveFn","nextTickFn","passValue","next","isActive","Math","floor","thenStack","catchStack","deferReset","resetTick","stop","forEach","start","reset","wheelControls","push","batch","funcArray","opts","concurrent","Number","POSITIVE_INFINITY","interval","repeat","sequanceTaskEntries","fill","sequanceLength","sequanceComplete","sequanceReseult","sequanceOperator","output","entry","limitOutput","operate","input","result"],"mappings":"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","sourcesContent":["import { asArray, asObject, isNumber, likePromise, turn, argumentNamesBy } from '../functions'\nimport { operate } from './operate'\n\nconst PromiseClass = Promise\n\nconst resolveFn = PromiseClass.resolve\nconst rejectFn = PromiseClass.reject\n\nexport const newPromise = (fn)=>(new PromiseClass((r, c)=>{\n  const maybeAwaiter = fn(r, c)\n  likePromise(maybeAwaiter) && maybeAwaiter.then(r).catch(c)\n}))\n\nexport const promise = (fn)=>newPromise(fn)\nconst PromiseFunction = promise\n\nexport const all     = Promise.all\nPromiseFunction.all = all\n\nexport const resolve    = resolveFn\nPromiseFunction.resolve = resolve\n\nexport const reject    = rejectFn\nPromiseFunction.reject = reject\n\nexport const timeout = function (fn, time){\n  if(typeof fn === \"number\"){\n    return newPromise(resolve=>setTimeout(()=>resolve(time), fn))\n  } else {\n    return newPromise(resolve=>setTimeout(()=>resolve(typeof fn === \"function\" ? fn() : fn), time))\n  }\n}\nPromiseFunction.timeout = timeout\n\nexport const valueOf = function (maybeQ){\n  return newPromise(function (resolve, reject){\n    likePromise(maybeQ)\n      ? maybeQ.then(resolve).catch(reject)\n      : resolve(maybeQ) \n  })\n}\nPromiseFunction.valueOf = valueOf\n\nconst abortMessage = new function (){\n  Object.defineProperty(this, \"message\", {\n    get: ()=>\":abort\"\n  })\n  Object.defineProperty(this, \"abort\", {\n    get: ()=>true\n  })\n}()\n\nexport const abort = function (notifyConsole = undefined){\n  return new PromiseClass((resolve, reject)=>{\n    if(notifyConsole === true){\n      console.warn(\"abort promise\")\n    }\n    reject(abortMessage)\n  })\n}\nPromiseFunction.abort = abort\n\nexport const defer = function (){\n  var resolve, reject\n  var promise = new PromiseClass(function (){\n    resolve = arguments[0]\n    reject = arguments[1]\n  })\n  return {\n    resolve: resolve,\n    reject : reject,\n    promise: promise\n  }\n}\nPromiseFunction.defer = defer\n\nexport const promisify = function (asyncErrCallbackfn){\n  const argumentNames = argumentNamesBy(asyncErrCallbackfn).slice(1)\n  const promisified   = function (){\n    const args = Array.from(arguments)\n    return new Promise((resolve, reject)=>{\n      asyncErrCallbackfn.apply(this, args.concat(function (err){\n        const [error, ...callbakArgs] = Array.from(arguments)\n        if(error){\n          reject(error)\n        } else if(argumentNames.length && callbakArgs.length > 1){\n          resolve(argumentNames.reduce((dest, name, index)=>{\n            dest[name] = callbakArgs[index]\n            return dest\n          }, {}))\n        } else {\n          resolve(callbakArgs[0])\n        }\n      }))\n    })\n  }\n  return function (){\n    return promisified.apply(this, Array.from(arguments))\n  }\n}\n\nexport const until = function (tasks, option){\n  if(!(tasks instanceof Array)){\n    return PromiseFunction.reject(new Error(\"tasks must be array\"))\n  }\n\n  if(!tasks.length || !tasks.some(e=>typeof e === \"function\")){\n    return PromiseFunction.reject(new Error(\"not found wheel executable\"))\n  }\n\n  if(!tasks.some(e=>(typeof e !== \"function\" || typeof e !== \"number\"))){\n    return PromiseFunction.reject(new Error(\"wheel task only function or number executable\"))\n  }\n\n  if(typeof option !== \"object\"){\n    option = {}\n  }\n\n  let finished = false\n  let defer\n  const limit = (typeof option.limit === \"number\" && option.limit > 0) ? parseInt(option.limit, 10) : 10000\n  const taskLength = tasks.length\n  let wheelTick = 0\n  let resetScope = 0\n  const nextWheelTick = (tick, value, tickScope)=>{\n    const nowAction = tasks[turn(tick, taskLength, 1)]\n\n    const isActiveFn = ()=>{\n      return tickScope === resetScope\n    }\n\n    const nextTickFn = passValue=>{\n      // if reset called\n      if(!isActiveFn()) return\n      // if over tick\n      if(wheelTick > limit){\n        return defer.reject(new Error(\"limit\"))\n      }\n      if(finished === false){\n        nextWheelTick(wheelTick++, passValue, tickScope)\n      }\n    }\n\n    if(typeof nowAction === \"function\"){\n      nowAction(\n        {\n          value,\n          next    : nextTickFn,\n          isActive: isActiveFn,\n          resolve : defer.resolve,\n          reject  : defer.reject\n        },\n        Math.floor(tick / tasks.length),\n        tick\n      )\n    } else if(typeof nowAction === \"number\"){\n      setTimeout(()=>{ nextTickFn(value) }, nowAction)\n    }\n  }\n  \n  const thenStack  = [\n    e=>{\n      if(finished === null) return PromiseFunction.abort()\n      finished = true\n      return e\n    }\n  ]\n  const catchStack = [\n    e=>{\n      if(finished === null) return PromiseFunction.abort()\n      finished = true\n      return PromiseFunction.reject(e)\n    }\n  ]\n  \n  const deferReset = (resetTick)=>{\n    defer && defer.stop()\n    //\n    defer = PromiseFunction.defer()\n    thenStack.forEach(fn=>defer.promise.then(fn))\n    catchStack.forEach(fn=>defer.promise.catch(fn))\n    \n    //\n    defer.stop = ()=>{\n      finished = null\n      resetScope += 1\n    }\n    \n    defer.start = (resetTick)=>{\n      if(finished === null){\n        finished = false\n        wheelTick = typeof resetTick === \"number\" ? resetTick : 0\n        nextWheelTick(wheelTick++, option.value, resetScope)\n      }\n    }\n    //\n    defer.reset = deferReset\n    //\n    finished = null\n    defer.start(resetTick)\n  }\n  \n  deferReset(0)\n  \n  const wheelControls = {\n    ...defer,\n    then (fn){\n      defer.promise.then(fn)\n      thenStack.push(fn)\n      return wheelControls\n    },\n    catch (fn){\n      defer.promise.catch(fn)\n      catchStack.push(fn)\n      return wheelControls\n    }\n  }\n  \n  return wheelControls\n}\n\nexport const batch = function (funcArray, opts){\n  return newPromise(function (resolve, reject){\n    const option = asObject(opts, \"concurrent\")\n      \n    if(option.concurrent === true){\n      option.concurrent = Number.POSITIVE_INFINITY\n    } else if(!isNumber(option.concurrent) || option.concurrent < 1){\n      option.concurrent = 1\n    }\n      \n    if(!isNumber(option.interval) || option.interval < -1){\n      option.interval = -1\n    }\n      \n    if(!isNumber(option.repeat) || option.repeat < 1){\n      option.repeat = 1\n    }\n      \n    //set task with repeat\n    const sequanceTaskEntries = Array(option.repeat)\n    .fill(asArray(funcArray))\n    .reduce((dest, tasks)=>{\n      tasks.forEach((fn, index)=>dest.push([index, fn]))\n      return dest\n    }, [])\n      \n    const sequanceLength = sequanceTaskEntries.length\n    let sequanceComplete = 0\n    const sequanceReseult = Array(sequanceTaskEntries.length)\n      \n    const sequanceOperator = operate({\n      output: async ({ entry })=>{\n        if(option.interval > -1){\n          await PromiseFunction.timeout(option.interval)\n        }\n        return entry\n      },\n      limitOutput: 1\n    })\n    .operate({\n      concurrent: option.concurrent,\n      input     : async ({ entry })=>{\n        const [index, fn] = entry\n        entry.push(await fn())\n        return entry\n      },\n      output: ({ entry })=>{\n        const [index, fn, result] = entry\n        sequanceReseult[index] = result\n        sequanceComplete++\n        if(sequanceComplete === sequanceLength){\n          resolve(sequanceReseult)\n        }\n      }\n    })\n    .concat(sequanceTaskEntries)\n  })\n}\n"],"file":"promise.js"}