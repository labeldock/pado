{"version":3,"sources":["../../.src/web/helper/repeatHelper.js"],"names":["RepeatHelper","key","enterFn","enter","updateFn","update","exitFn","exit","oldBag","getKey","datum","repeater","data","newData","newBag","forEach","index","newDatumKey","newMeta","matchOldMeta","find","old","vm","$continue","push","oldMeta","prevMeta","result","Error","map","d"],"mappings":"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","sourcesContent":["import { asArray } from '../../functions'\n\nexport default function RepeatHelper ({ key, enter:enterFn, update:updateFn, exit:exitFn }){\n  // {key:string, vm:Component}\n  let oldBag = []\n  \n  // 모델의 키를 얻는 함수\n  const getKey = typeof key === \"function\" ? key : function (datum){\n    return datum[key]\n  }\n  \n  // ng-repeat, v-for와 같은 리피터 구현체 (d3의 data().enter().exit() 컨샙이 비슷함)\n  const repeater = function (data){\n    let newData = asArray(data)\n    let newBag  = []\n    \n    //새 데이터를 검사합니다.\n    newData.forEach((datum, index)=>{\n      //키를 추출합니다.\n      const newDatumKey = getKey(datum) || index\n      \n      //키 샘플입니다.\n      const newMeta = {\n        key  : newDatumKey,\n        datum: datum\n      }\n      \n      //매치되는 오래된 메타를 확인합니다.\n      const matchOldMeta = oldBag.find(old=>old.key === newDatumKey)\n      \n      //오래된 메타가 확인될 시\n      if(matchOldMeta){\n        //exit를 하지 않고 살립니다.\n        newMeta.vm = matchOldMeta.vm\n        matchOldMeta.$continue = true\n      }\n      \n      newBag.push(newMeta)\n    })\n    \n    //exit (require)\n    oldBag.forEach(oldMeta=>{\n      if(!oldMeta.$continue){\n        exitFn(oldMeta)\n      }\n    })\n    \n    //메타에 추가 정보 입력 (prevVm)\n    newBag.forEach((newMeta, index)=>{\n      const prevMeta = newBag[index - 1]\n      if(prevMeta && prevMeta[\"vm\"]){\n        newMeta[\"prevVm\"] = prevMeta[\"vm\"]\n      }\n    })\n    \n    //enter (require)\n    newBag.forEach((newMeta, index)=>{\n      if(!newMeta.vm){\n        let result = enterFn(newMeta, index)\n        if(!result){\n          throw new Error(\"enter는 반드시 vm을 리턴해야합니다.\")\n        } else {\n          newMeta[\"vm\"] = result\n        }\n      }\n    })\n    \n    //update (option)\n    updateFn && newBag.forEach((newMeta, index)=>{\n      updateFn(newMeta, index)\n    })\n    \n    //history change\n    oldBag = newBag\n  }\n  \n  //컴포넌트에서 정렬된 데이터를 얻기위한 용도로 제작. Component에서 (개발 시간상) 한계로 이곳에서 수행\n  repeater[\"vm\"] = function (){\n    return oldBag.map(d=>d.vm)\n  }\n  \n  return repeater\n};\n"],"file":"repeatHelper.js"}