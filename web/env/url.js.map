{"version":3,"sources":["../../.src/web/env/url.js"],"names":["readUrl","inputUrl","info","url","window","document","URL","toString","exec","e","console","error","valid","protocol","divider","userinfo","hostname","port","substring","path","query","fragment","filename","host","params","result","substr","split","forEach","onePiece","i","entry","decodeURI","serialize","obj","transform","invalid","Object","keys","value","key","stringValue","each","val","push","length","join"],"mappings":"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","sourcesContent":["import { isArray, asArray } from '../../functions';\n\nexport const readUrl = function(inputUrl){\n  let info;\n  let url; \n    \n  try {\n    url  = inputUrl?inputUrl:window.document.URL.toString();\n    info = /([\\w]+)(\\:[\\/]+)([^/]*\\@|)([\\w\\d\\.\\-\\_\\+]+)(\\:[\\d]+|)(\\/|)([\\w\\d\\.\\/\\-\\_\\;\\=]+|)(\\?[\\d\\w\\=\\&\\%\\,\\.\\/\\(\\)-]+|)(\\#[\\d\\w]*|)/.exec(url);\n  } catch(e) {\n    info = null;\n  }\n  \n  if(info === null) {\n    console.error(\"faild parse url\",e);\n    return {\n      url:url || null,\n      valid:false\n    };\n  }\n  \n  const protocol = info[1];\n  const divider = info[2];\n  const userinfo = info[3];\n  const hostname = info[4];\n  const port = info[5].substring(1);\n  const path = info[6]+info[7];\n  const query = info[8];\n  const fragment = info[9];\n  const filename = /(\\/|)([\\w\\d\\.\\-\\_]+|)$/.exec(info[6]+info[7])[2];\n  const host = info[1]+info[2]+info[4]+info[5];\n  const params = (function(){\n    const result = {};\n    if(query){\n      query.substr(1).split(\"&\").forEach((onePiece,i)=>{\n        const entry = onePiece.split(\"=\");\n        result[decodeURI(entry[0])] = decodeURI(entry[1]);\n      });\n    }\n    return result;\n  }());\n\n  return {\n    url,\n    protocol,\n    divider,\n    userinfo,\n    hostname,\n    port,\n    path,\n    query,\n    fragment,\n    filename,\n    host,\n    params,\n    valid:true\n  };\n};\n    \nexport const serialize = function(obj,transform){\n  const params = [];\n  let invalid  = [];\n  \n  Object.keys(obj).forEach(key=>{\n    let value = obj[key];\n    let stringValue = \"\";\n\n    if(typeof value === \"undefined\"){\n      return;\n    } else if(value === null){\n      stringValue = \"\";\n    } else if(isArray(value)){\n      return value.each((val)=>{\n        typeof transform === \"function\" ?\n        params.push(transform(key) + \"=\" + transform(val)):\n        params.push(key + \"=\" + val);\n      });\n    } else if(typeof value === \"object\") {\n      return invalid.push(key);\n    } else {\n      stringValue = value + \"\";\n    }\n          \n    typeof transform === \"function\" ?\n    params.push(transform(key) + \"=\" + transform(stringValue)):\n    params.push(key + \"=\" + stringValue);\n  })\n      \n  if(invalid.length){\n    invalid = null;\n  }\n  \n  return params.join(\"&\");\n}"],"file":"url.js"}