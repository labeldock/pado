{"version":3,"sources":["../../.src/web/env/url.js"],"names":["readUrl","inputUrl","info","url","window","document","URL","toString","exec","e","console","error","valid","protocol","divider","userinfo","hostname","port","substring","path","query","fragment","filename","host","params","result","substr","split","forEach","onePiece","entry","decodeURI","serialize","obj","transform","invalid","Object","keys","value","key","stringValue","each","val","push","length","join"],"mappings":"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","sourcesContent":["import { isArray } from '../../functions'\n\nexport const readUrl = function (inputUrl){\n  let info\n  let url \n    \n  try {\n    url = inputUrl || window.document.URL.toString()\n    info = /([\\w]+)(\\:[\\/]+)([^/]*\\@|)([\\w\\d\\.\\-\\_\\+]+)(\\:[\\d]+|)(\\/|)([\\w\\d\\.\\/\\-\\_\\;\\=]+|)(\\?[\\d\\w\\=\\&\\%\\,\\.\\/\\(\\)-]+|)(\\#[\\d\\w]*|)/.exec(url)\n  } catch (e){\n    info = null\n  }\n  \n  if(info === null){\n    console.error(\"faild parse url\", inputUrl)\n    return {\n      url  : url || null,\n      valid: false\n    }\n  }\n  \n  const protocol = info[1]\n  const divider = info[2]\n  const userinfo = info[3]\n  const hostname = info[4]\n  const port = info[5].substring(1)\n  const path = info[6] + info[7]\n  const query = info[8]\n  const fragment = info[9]\n  const filename = /(\\/|)([\\w\\d\\.\\-\\_]+|)$/.exec(info[6] + info[7])[2]\n  const host = info[1] + info[2] + info[4] + info[5]\n  const params = (function (){\n    const result = {}\n    if(query){\n      query.substr(1).split(\"&\").forEach((onePiece)=>{\n        const entry = onePiece.split(\"=\")\n        result[decodeURI(entry[0])] = decodeURI(entry[1])\n      })\n    }\n    return result\n  }())\n\n  return {\n    url,\n    protocol,\n    divider,\n    userinfo,\n    hostname,\n    port,\n    path,\n    query,\n    fragment,\n    filename,\n    host,\n    params,\n    valid: true\n  }\n}\n    \nexport const serialize = function (obj, transform){\n  const params = []\n  let invalid  = []\n  \n  Object.keys(obj).forEach(key=>{\n    let value = obj[key]\n    let stringValue = \"\"\n\n    if(typeof value === \"undefined\"){\n      return\n    } else if(value === null){\n      stringValue = \"\"\n    } else if(isArray(value)){\n      return value.each((val)=>{\n        typeof transform === \"function\"\n          ? params.push(transform(key) + \"=\" + transform(val))\n          : params.push(key + \"=\" + val)\n      })\n    } else if(typeof value === \"object\"){\n      return invalid.push(key)\n    } else {\n      stringValue = value + \"\"\n    }\n          \n    typeof transform === \"function\"\n      ? params.push(transform(key) + \"=\" + transform(stringValue))\n      : params.push(key + \"=\" + stringValue)\n  })\n      \n  if(invalid.length){\n    invalid = null\n  }\n  \n  return params.join(\"&\")\n}\n"],"file":"url.js"}