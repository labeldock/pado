{"version":3,"sources":["../.src/functions/random.js"],"names":["rand64","rand64Token","length","codeAt","codeLength","parseInt","result","i","l","charAt","Math","random","tokenize","seed","digits","floor","abs","sin","Number","replace","s","charCodeAt","toString","randRange","rangeValue","nice","start","end","ceil"],"mappings":";;;;;;;;;;;;;;;;;;;;AAIO,MAAMA,MAAM,GAAI,YAAW;AAChC,QAAIC,WAAW,GAAG,kEAAlB;AACA,WAAO,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,UAA1B,EAAqC;AAC1CF,MAAAA,MAAM,GAAI,2BAAcA,MAAd,CAAD,GAA0B,CAA1B,GAA8BG,QAAQ,CAACH,MAAD,EAAS,EAAT,CAA/C;AACAC,MAAAA,MAAM,GAAI,2BAAcA,MAAd,CAAD,GAA0B,CAA1B,GAA8BE,QAAQ,CAACF,MAAD,EAAS,EAAT,CAA/C;AACAC,MAAAA,UAAU,GAAI,2BAAcA,UAAd,CAAD,GAA8B,KAAKD,MAAnC,GAA4CE,QAAQ,CAACD,UAAD,EAAa,EAAb,CAAjE;AACA,UAAIE,MAAM,GAAG,EAAb;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGN,MAAnB,EAA2BK,CAAC,GAAGC,CAA/B,EAAkCD,CAAC,EAAnC;AAAuCD,QAAAA,MAAM,GAAGA,MAAM,GAAGL,WAAW,CAACQ,MAAZ,CAAmBN,MAAM,GAAGE,QAAQ,CAACK,IAAI,CAACC,MAAL,KAAgBP,UAAjB,EAA6B,EAA7B,CAApC,CAAlB;AAAvC;;AACA,aAAOE,MAAP;AACD,KAPD;AAQD,GAVsB,EAAhB;;;;AAaA,MAAMM,QAAQ,GAAG,SAAXA,QAAW,CAAUC,IAAV,EAAgBC,MAAhB,EAAuB;AAC7C,WAAOJ,IAAI,CAACK,KAAL,CAAYL,IAAI,CAACM,GAAL,CAASN,IAAI,CAACO,GAAL,CAASC,MAAM,CAAC,CAACL,IAAI,GAAG,EAAR,EAAYM,OAAZ,CAAoB,IAApB,EAA0B,UAAUC,CAAV,EAAY;AAAE,aAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,CAAP;AAAwB,KAAhE,CAAD,CAAf,IAAsF,QAA/F,CAAD,GAA6G,QAAxH,EAAkIC,QAAlI,CAA2IR,MAAM,IAAI,EAArJ,CAAP;AACD,GAFM;;;;AAGA,MAAMS,SAAS,GAAG,SAAZA,SAAY,CAAUC,UAAV,EAAsBC,IAAtB,EAA2B;AAAA,sBAC3B,wBAAWD,UAAX,CAD2B;AAAA,QAC1CE,KAD0C,eAC1CA,KAD0C;AAAA,QACnCC,GADmC,eACnCA,GADmC;;AAElD,QAAMrB,MAAM,GAAGoB,KAAK,GAAIhB,IAAI,CAACC,MAAL,MAAiBgB,GAAG,GAAGD,KAAvB,CAAxB;AACA,WAAOD,IAAI,KAAK,IAAT,GAAgBf,IAAI,CAACkB,IAAL,CAAUtB,MAAV,CAAhB,GAAoCA,MAA3C;AACD,GAJM","sourcesContent":["import { isAbsoluteNaN } from './isLike'\n\nimport { rangeModel } from './matrix'\n\nexport const rand64 = (function (){\n  var rand64Token = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n  return function (length, codeAt, codeLength){\n    length = (isAbsoluteNaN(length)) ? 1 : parseInt(length, 10)\n    codeAt = (isAbsoluteNaN(codeAt)) ? 0 : parseInt(codeAt, 10)\n    codeLength = (isAbsoluteNaN(codeLength)) ? 62 - codeAt : parseInt(codeLength, 10)\n    var result = \"\"\n    for(var i = 0, l = length; i < l; i++) result = result + rand64Token.charAt(codeAt + parseInt(Math.random() * codeLength, 10))\n    return result\n  }\n}())\n\n\nexport const tokenize = function (seed, digits){\n  return Math.floor((Math.abs(Math.sin(Number((seed + \"\").replace(/./g, function (s){ return s.charCodeAt(0) }))) * 16777215)) % 16777215).toString(digits || 16) \n}\nexport const randRange = function (rangeValue, nice){\n  const { start, end } = rangeModel(rangeValue)\n  const result = start + (Math.random() * (end - start))\n  return nice === true ? Math.ceil(result) : result\n}\n"],"file":"random.js"}