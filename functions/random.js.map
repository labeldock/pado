{"version":3,"sources":["../.src/functions/random.js"],"names":["rand64","rand64Token","length","codeAt","codeLength","parseInt","result","i","l","charAt","Math","random","tokenize","seed","digits","floor","abs","sin","Number","replace","s","charCodeAt","toString","randRange","rangeValue","nice","start","end","ceil"],"mappings":";;;;;;;;;;;;;;;;;;;;AAIO,MAAMA,SAAU,YAAW;AAChC,QAAIC,cAAc,kEAAlB;AACA,WAAO,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,UAA1B,EAAqC;AAC1CF,eAAU,2BAAcA,MAAd,CAAD,GAA0B,CAA1B,GAA8BG,SAASH,MAAT,CAAvC;AACAC,eAAU,2BAAcA,MAAd,CAAD,GAA0B,CAA1B,GAA8BE,SAASF,MAAT,CAAvC;AACAC,mBAAc,2BAAcA,UAAd,CAAD,GAA8B,KAAKD,MAAnC,GAA4CE,SAASD,UAAT,CAAzD;AACA,UAAIE,SAAS,EAAb;;AACA,WAAI,IAAIC,IAAI,CAAR,EAAWC,IAAIN,MAAnB,EAA2BK,IAAIC,CAA/B,EAAkCD,GAAlC;AAAuCD,iBAASA,SAASL,YAAYQ,MAAZ,CAAmBN,SAASE,SAASK,KAAKC,MAAL,KAAgBP,UAAzB,CAA5B,CAAlB;AAAvC;;AACA,aAAOE,MAAP;AACD,KAPD;AAQD,GAVsB,EAAhB;;;;AAaA,MAAMM,WAAW,SAAXA,QAAW,CAAUC,IAAV,EAAgBC,MAAhB,EAAuB;AAC7C,WAAOJ,KAAKK,KAAL,CAAYL,KAAKM,GAAL,CAASN,KAAKO,GAAL,CAASC,OAAO,CAACL,OAAO,EAAR,EAAYM,OAAZ,CAAoB,IAApB,EAA0B,UAAUC,CAAV,EAAab,CAAb,EAAe;AAAE,aAAOa,EAAEC,UAAF,CAAa,CAAb,CAAP;AAAwB,KAAnE,CAAP,CAAT,IAAyF,QAAlG,CAAD,GAAgH,QAA3H,EAAqIC,QAArI,CAA8IR,UAAU,EAAxJ,CAAP;AACD,GAFM;;;;AAGA,MAAMS,YAAY,SAAZA,SAAY,CAAUC,UAAV,EAAsBC,IAAtB,EAA2B;AAAA,sBAC3B,wBAAWD,UAAX,CAD2B;AAAA,QAC1CE,KAD0C,eAC1CA,KAD0C;AAAA,QACnCC,GADmC,eACnCA,GADmC;;AAElD,QAAMrB,SAASoB,QAAShB,KAAKC,MAAL,MAAiBgB,MAAMD,KAAvB,CAAxB;AACA,WAAOD,SAAS,IAAT,GAAgBf,KAAKkB,IAAL,CAAUtB,MAAV,CAAhB,GAAoCA,MAA3C;AACD,GAJM","sourcesContent":["import { isAbsoluteNaN } from './isLike'\n\nimport { rangeModel } from './matrix'\n\nexport const rand64 = (function (){\n  var rand64Token = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n  return function (length, codeAt, codeLength){\n    length = (isAbsoluteNaN(length)) ? 1 : parseInt(length)\n    codeAt = (isAbsoluteNaN(codeAt)) ? 0 : parseInt(codeAt)\n    codeLength = (isAbsoluteNaN(codeLength)) ? 62 - codeAt : parseInt(codeLength)\n    var result = \"\"\n    for(var i = 0, l = length; i < l; i++) result = result + rand64Token.charAt(codeAt + parseInt(Math.random() * codeLength))\n    return result\n  }\n}())\n\n\nexport const tokenize = function (seed, digits){\n  return Math.floor((Math.abs(Math.sin(Number((seed + \"\").replace(/./g, function (s, i){ return s.charCodeAt(0) }))) * 16777215)) % 16777215).toString(digits || 16) \n}\nexport const randRange = function (rangeValue, nice){\n  const { start, end } = rangeModel(rangeValue)\n  const result = start + (Math.random() * (end - start))\n  return nice === true ? Math.ceil(result) : result\n}\n"],"file":"random.js"}