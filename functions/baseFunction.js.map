{"version":3,"sources":["../packages/pado/functions/baseFunction.js"],"names":["baseAsArray","data","defaultArray","undefined","toArray","stringTest","string","rule","meta","Boolean","indexOf","RegExp","test","some","filterKey","matchString","it","search","at","Error","replace","s","result","substr","match","index","length","baseKeys","target","filterExp","strict","Object","keys","filter","key","isNaN","numberKey","parseInt","push","forEach","baseEntries","v","k"],"mappings":"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","sourcesContent":["import {\n  likeObject,\n  likeArray,\n  likeString,\n  isPlainObject,\n  isArray,\n  isNone\n} from './isLike'\n\nexport const baseAsArray = function (data, defaultArray = undefined){\n  if(isArray(data)){\n    return data\n  }\n  if(isNone(data)){\n    return isArray(defaultArray) ? defaultArray\n      : isNone(defaultArray) ? [] : [defaultArray]\n  }\n  if(typeof data === \"object\" && typeof data.toArray === \"function\"){\n    return data.toArray()\n  }\n  return [data]\n}\n\nexport const stringTest = function (string, rule, meta){\n  if(!likeString(string)) return false\n  if(typeof rule === \"undefined\") return true\n  return typeof rule === \"function\" ? Boolean(rule(string, meta))\n    : likeString(rule) ? (string + '').indexOf(rule + '') > -1\n    : rule instanceof RegExp ? rule.test(string)\n    : isArray(rule) ? rule.some(filterKey=>filterKey === string)\n    : false\n}\n\n//remark.spec.js\nexport const matchString = (it, search, at = 0)=>{\n  if(typeof it !== \"string\") throw new Error(`matchString :: worng argument ${it}`)\n  if(typeof search === \"string\") search = search.replace(new RegExp(\"(\\\\.|\\\\[|\\\\])\", \"g\"), s=>`\\\\${s}`)\n  const result = it.substr(at).match(search)\n  return result ? [result.index + at, result[0].length] : [-1, 0]\n}\n\nexport const baseKeys = function (target, filterExp, strict){\n  const result = []\n  \n  if(!likeObject(target)){\n    return result\n  }\n  \n  if(strict === true ? isArray(target) : likeArray(target)){\n    Object.keys(target).filter(key=>{ \n      if(isNaN(key)) return\n      const numberKey = parseInt(key, 10)\n      stringTest(numberKey, filterExp, target[key]) && result.push(parseInt(numberKey, 10)) \n    })\n  } else if((strict === true ? isPlainObject(target) : likeObject(target))){\n    Object.keys(target).forEach(key=>{ \n      stringTest(key, filterExp, target[key]) && result.push(key) \n    })\n  }\n  \n  return result\n}\n\nexport const baseEntries = function (it){\n  const result = []\n  switch (typeof it){\n    case \"object\":\n      // eslint-disable-next-line no-unused-expressions\n      isNone(it) ? 0\n        : likeArray(it) ? baseAsArray(it).forEach((v, k)=>{ result.push([k, v]) })\n        : Object.keys(it).forEach(key=>{ result.push([key, it[key]]) })\n      break\n  }\n  return result\n}\n"],"file":"baseFunction.js"}