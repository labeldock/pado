{"version":3,"sources":["../.src/functions/hack.js"],"names":["argumentNamesBy","getArgs","fn","args","toString","match","split","map","s","trim","filter","n","scopelizeBy","evalCommand","indexOf","command","scopeBeforeFn","scope","info","params","fnArgs","Object","keys","forEach","push","key","makeFn","Function","apply","func","scoped"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAO,MAAMA,kBAAkB,SAASC,OAAT,CAAkBC,EAAlB,EAAqB;AAClD,QAAG,OAAOA,EAAP,KAAc,UAAjB,EAA6B,OAAO,EAAP,CADqB,CAEhD;AACA;;AACF,QAAIC,OAAOD,GAAGE,QAAH,GAAcC,KAAd,CAAoB,kDAApB,EAAwE,CAAxE,CAAX;AACA,QAAG,CAACF,IAAJ,EAAU,OAAO,EAAP;AACV,WAAOA,KAAKG,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAoB;AAAA,aAAGC,EAAEC,IAAF,EAAH;AAAA,KAApB,EAAiCC,MAAjC,CAAwC;AAAA,aAAGC,CAAH;AAAA,KAAxC,CAAP;AACD,GAPM;;;;AASA,MAAMC,cAAc,SAAdA,WAAc,CAAUC,WAAV,EAAsB;AAC/C,QAAGA,YAAYC,OAAZ,CAAoB,QAApB,IAAgC,CAAC,CAApC,EAAsC;AACpCD;AACD,KAFD,MAEO;AACLA,kCAA0BA,WAA1B;AACD;;AAED,QAAME,UAAUF,WAAhB;;AACA,QAAMG,gBAAgB,SAAhBA,aAAgB,CAAUC,KAAV,EAAiBC,IAAjB,EAAsB;AAC1C,UAAMC,SAAS,EAAf;AACA,UAAMC,SAAS,EAAf;AAEAC,aAAOC,IAAP,CAAYL,KAAZ,EAAmBM,OAAnB,CAA2B,eAAK;AAC9BJ,eAAOK,IAAP,CAAYP,MAAMQ,GAAN,CAAZ;AACAL,eAAOI,IAAP,CAAYC,GAAZ;AACD,OAHD;AAKAL,aAAOI,IAAP,CAAYT,OAAZ;AAEA,UAAMW,SAASC,SAASC,KAAT,CAAeD,QAAf,EAAyBP,MAAzB,CAAf;;AAEA,UAAG,OAAOF,IAAP,KAAgB,UAAnB,EAA8B;AAC5BA,aAAK;AACHW,gBAAQH,MADL;AAEHvB,gBAAQiB,MAFL;AAGHD,kBAAQA;AAHL,SAAL;AAKD;;AAED,aAAOO,OAAOE,KAAP,CAAa,KAAK,CAAlB,EAAqBT,MAArB,CAAP;AACD,KAtBD;;AAwBAH,kBAAcc,MAAd,GAAuB,YAAW;AAChC,aAAOf,OAAP;AACD,KAFD;;AAIA,WAAOC,aAAP;AACD,GArCM","sourcesContent":["export const argumentNamesBy = function getArgs (fn){\n  if(typeof fn !== \"function\") return []\n    // normal -  function[^\\(]*?\\(([^)]*)\\)\n    // arrow  -  \\([\\)]*\\)\\s*\\=\\>\\s*\\{\n  var args = fn.toString().match(/function[^\\(]*?\\(([^)]*)\\)|\\([\\)]*\\)\\s*\\=\\>\\s*\\{/)[1]\n  if(!args) return []\n  return args.split(',').map(s=>s.trim()).filter(n=>n)\n}\n\nexport const scopelizeBy = function (evalCommand){\n  if(evalCommand.indexOf(\"return\") > -1){\n    evalCommand\n  } else {\n    evalCommand = `  return ${evalCommand}`\n  }\n\n  const command = evalCommand\n  const scopeBeforeFn = function (scope, info){\n    const params = []\n    const fnArgs = []\n    \n    Object.keys(scope).forEach(key=>{\n      params.push(scope[key])\n      fnArgs.push(key)\n    })\n    \n    fnArgs.push(command)\n    \n    const makeFn = Function.apply(Function, fnArgs)\n    \n    if(typeof info === \"function\"){\n      info({\n        func  : makeFn,\n        args  : fnArgs,\n        params: params\n      })\n    }\n    \n    return makeFn.apply(void 0, params)\n  }\n  \n  scopeBeforeFn.scoped = function (){\n    return command\n  }\n  \n  return scopeBeforeFn\n}\n\n"],"file":"hack.js"}