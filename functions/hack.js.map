{"version":3,"sources":["../.src/functions/hack.js"],"names":["argumentNamesBy","getArgs","fn","args","toString","match","split","map","s","trim","filter","n","scopelizeBy","evalCommand","indexOf","command","scopeBeforeFn","scope","info","params","fnArgs","Object","keys","forEach","push","key","makeFn","Function","apply","func","scoped"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAO,MAAMA,kBAAkB,SAASC,OAAT,CAAiBC,EAAjB,EAAqB;AAChD,QAAG,OAAOA,EAAP,KAAc,UAAjB,EAA6B,OAAO,EAAP,CADmB,CAEhD;AACA;;AACA,QAAIC,OAAOD,GAAGE,QAAH,GAAcC,KAAd,CAAoB,kDAApB,EAAwE,CAAxE,CAAX;AACA,QAAG,CAACF,IAAJ,EAAU,OAAO,EAAP;AACV,WAAOA,KAAKG,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAoB;AAAA,aAAGC,EAAEC,IAAF,EAAH;AAAA,KAApB,EAAiCC,MAAjC,CAAwC;AAAA,aAAGC,CAAH;AAAA,KAAxC,CAAP;AACH,GAPM;;;;AASA,MAAMC,cAAc,SAAdA,WAAc,CAASC,WAAT,EAAqB;AAC9C,QAAGA,YAAYC,OAAZ,CAAoB,QAApB,IAAgC,CAAC,CAApC,EAAsC;AACpCD;AACD,KAFD,MAEO;AACLA,kCAA0BA,WAA1B;AACD;;AAED,QAAME,UAAUF,WAAhB;;AACA,QAAMG,gBAAgB,SAAhBA,aAAgB,CAASC,KAAT,EAAeC,IAAf,EAAoB;AACxC,UAAMC,SAAS,EAAf;AACA,UAAMC,SAAS,EAAf;AAEAC,aAAOC,IAAP,CAAYL,KAAZ,EAAmBM,OAAnB,CAA2B,eAAK;AAC9BJ,eAAOK,IAAP,CAAYP,MAAMQ,GAAN,CAAZ;AACAL,eAAOI,IAAP,CAAYC,GAAZ;AACD,OAHD;AAKAL,aAAOI,IAAP,CAAYT,OAAZ;AAEA,UAAMW,SAASC,SAASC,KAAT,CAAeD,QAAf,EAAwBP,MAAxB,CAAf;;AAEA,UAAG,OAAOF,IAAP,KAAgB,UAAnB,EAA8B;AAC5BA,aAAK;AACHW,gBAAKH,MADF;AAEHvB,gBAAKiB,MAFF;AAGHD,kBAAOA;AAHJ,SAAL;AAKD;;AAED,aAAOO,OAAOE,KAAP,CAAa,KAAK,CAAlB,EAAoBT,MAApB,CAAP;AACD,KAtBD;;AAwBAH,kBAAcc,MAAd,GAAuB,YAAU;AAC/B,aAAOf,OAAP;AACD,KAFD;;AAIA,WAAOC,aAAP;AACD,GArCM","sourcesContent":["export const argumentNamesBy = function getArgs(fn) {\n    if(typeof fn !== \"function\") return [];\n    // normal -  function[^\\(]*?\\(([^)]*)\\)\n    // arrow  -  \\([\\)]*\\)\\s*\\=\\>\\s*\\{\n    var args = fn.toString().match(/function[^\\(]*?\\(([^)]*)\\)|\\([\\)]*\\)\\s*\\=\\>\\s*\\{/)[1];\n    if(!args) return [];\n    return args.split(',').map(s=>s.trim()).filter(n=>n);\n};\n\nexport const scopelizeBy = function(evalCommand){\n  if(evalCommand.indexOf(\"return\") > -1){\n    evalCommand\n  } else {\n    evalCommand = `  return ${evalCommand}`;\n  }\n\n  const command = evalCommand;\n  const scopeBeforeFn = function(scope,info){\n    const params = [];\n    const fnArgs = [];\n    \n    Object.keys(scope).forEach(key=>{\n      params.push(scope[key]);\n      fnArgs.push(key);\n    });\n    \n    fnArgs.push(command);\n    \n    const makeFn = Function.apply(Function,fnArgs);\n    \n    if(typeof info === \"function\"){\n      info({\n        func:makeFn,\n        args:fnArgs,\n        params:params\n      });\n    }\n    \n    return makeFn.apply(void 0,params);\n  };\n  \n  scopeBeforeFn.scoped = function(){\n    return command;\n  };\n  \n  return scopeBeforeFn;\n};\n\n"],"file":"hack.js"}