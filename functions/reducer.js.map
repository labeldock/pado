{"version":3,"sources":["../.src/src/functions/reducer.js"],"names":["matchString","it","search","at","Error","replace","RegExp","s","result","substr","match","index","length","findIndex","__find_string","indexOf","__find_regexp","i","substring","findIndexes","c","idxs","mvc","next","push","cut","collection","cutLength","emptyDefault","undefined","data","fill","splice","Number","POSITIVE_INFINITY","dataLength","l","top","iteratee","topLength","a","b","NEGATIVE_INFINITY","sort"],"mappings":";;;;;;;;;;;;;;;;;;;;AAiBA;AACO,MAAMA,cAAc,SAAdA,WAAc,CAACC,EAAD,EAAIC,MAAJ,EAAWC,EAAX,EAAkB;AAAA,QAAPA,EAAO;AAAPA,QAAO,GAAJ,CAAI;AAAA;;AAC3C,QAAG,OAAOF,EAAP,KAAc,QAAjB,EAA2B,MAAM,IAAIG,KAAJ,oCAA2CH,EAA3C,CAAN;AAC3B,QAAG,OAAOC,MAAP,KAAkB,QAArB,EAA+BA,SAASA,OAAOG,OAAP,CAAe,IAAIC,MAAJ,CAAW,eAAX,EAA2B,GAA3B,CAAf,EAA+C;AAAA,oBAAQC,CAAR;AAAA,KAA/C,CAAT;AAC/B,QAAMC,SAASP,GAAGQ,MAAH,CAAUN,EAAV,EAAcO,KAAd,CAAoBR,MAApB,CAAf;AACA,WAAOM,SAAS,CAACA,OAAOG,KAAP,GAAaR,EAAd,EAAkBK,OAAO,CAAP,EAAUI,MAA5B,CAAT,GAA+C,CAAC,CAAC,CAAF,EAAK,CAAL,CAAtD;AACD,GALM;;;;AAOA,MAAMC,YAAa,YAAU;AAClC,QAAMC,gBAAgB,SAAhBA,aAAgB,CAACb,EAAD,EAAIC,MAAJ,EAAWC,EAAX;AAAA,aAAgBF,GAAGc,OAAH,CAAWb,MAAX,EAAkBC,EAAlB,CAAhB;AAAA,KAAtB;;AACA,QAAMa,gBAAgB,SAAhBA,aAAgB,CAACf,EAAD,EAAIC,MAAJ,EAAWC,EAAX,EAAgB;AACpC,UAAIc,IAAIhB,GAAGiB,SAAH,CAAaf,MAAM,CAAnB,EAAsBD,MAAtB,CAA6BA,MAA7B,CAAR;AACA,aAAQe,KAAK,CAAN,GAAYA,KAAKd,MAAM,CAAX,CAAZ,GAA6Bc,CAApC;AACD,KAHD;;AAIA,WAAO,UAAChB,EAAD,EAAIC,MAAJ,EAAWC,EAAX;AAAA,aAAgB,CAAED,kBAAkBI,MAAnB,GAA2BU,aAA3B,GAAyCF,aAA1C,EAAyDb,EAAzD,EAA4DC,MAA5D,EAAmEC,EAAnE,CAAhB;AAAA,KAAP;AACD,GAPyB,EAAnB,C,CASP;;;;;AACO,MAAMgB,cAAe,YAAU;AACpC,WAAO,UAASC,CAAT,EAAWb,CAAX,EAAaJ,EAAb,EAAgB;AACnB,UAAG,OAAOiB,CAAP,KAAa,QAAb,IAAyB,OAAOA,CAAP,KAAa,QAAzC,EAAkD;AAChD,YAAIC,OAAK,EAAT;AAAA,YAAaC,MAAIF,IAAE,EAAnB;AAAA,YAAuBb,IAAE,wBAAWA,CAAX,IAAcA,CAAd,GAAgBA,IAAE,EAA3C;AAAA,YAA+CJ,KAAI,CAACA,EAAD,IAAO,CAAC,sBAASA,EAAT,CAAR,IAAwBA,KAAK,CAA9B,GAAiC,CAAjC,GAAmCA,EAArF;AAAA,YAAyFoB,IAAzF;;AACA,WAAG;AACD,cAAIN,IAAIJ,UAAUO,CAAV,EAAYb,CAAZ,EAAcJ,EAAd,CAAR;;AACA,cAAGc,IAAI,CAAC,CAAR,EAAU;AACRd,iBAAK,CAACI,EAAEK,MAAF,IAAY,CAAb,IAAkBK,CAAvB;AACAI,iBAAKG,IAAL,CAAUP,CAAV;AACAM,mBAAO,IAAP;AACD,WAJD,MAIO;AACLA,mBAAO,KAAP;AACD;AACF,SATD,QASQA,IATR;;AAUA,eAAOF,IAAP;AACD;AACF,KAfH;AAgBD,GAjB2B,EAArB,C,CAmBP;;;;;AACO,MAAMI,MAAM,SAANA,GAAM,CAASC,UAAT,EAAoBC,SAApB,EAAgCC,YAAhC,EAAuD;AAAA,QAAnCD,SAAmC;AAAnCA,eAAmC,GAAzB,CAAyB;AAAA;;AAAA,QAAvBC,YAAuB;AAAvBA,kBAAuB,GAAVC,SAAU;AAAA;;AACxE,QAAIC,OAAO,mBAAQJ,UAAR,CAAX;AACA,QAAIK,OAAOH,YAAX;;AAEA,QAAGE,KAAKlB,MAAL,GAAce,SAAjB,EAA2B;AACzBG,WAAKE,MAAL,CAAYL,SAAZ,EAAsBM,OAAOC,iBAA7B;AACA,aAAOJ,IAAP;AACD;;AAED,QAAIK,aAAaL,KAAKlB,MAAtB;;AAEA,QAAG,OAAOgB,YAAP,KAAwB,UAA3B,EAAsC;AACpCG,aAAO;AAAA,eAAIH,YAAJ;AAAA,OAAP;AACD;;AAED,SAAI,IAAIX,IAAE,CAAN,EAAQmB,IAAET,YAAUQ,UAAxB,EAAmClB,IAAEmB,CAArC,EAAuCnB,GAAvC,EAA2C;AACzCa,WAAKN,IAAL,CAAUO,KAAMI,YAAN,EAAoBlB,CAApB,CAAV;AACD;;AAED,WAAOa,IAAP;AACD,GApBM,C,CAsBP;;;;;AACO,MAAMO,MAAM,SAANA,GAAM,CAASP,IAAT,EAAcQ,QAAd,EAAuBC,SAAvB,EAAiC;AAClD,YAAO,OAAOD,QAAd;AACA,WAAK,UAAL;AACE;AACA;;AACF,WAAK,SAAL;AACEA,mBAASA,WAAS,UAACE,CAAD,EAAGC,CAAH;AAAA,iBAAOD,IAAEC,CAAT;AAAA,SAAT,GAAoB,UAACD,CAAD,EAAGC,CAAH;AAAA,iBAAOD,IAAEC,CAAT;AAAA,SAA7B;AACA;;AACF;AACEH,mBAAS,kBAACE,CAAD,EAAGC,CAAH;AAAA,iBAAOD,IAAEC,CAAT;AAAA,SAAT;;AACA;AATF;;AAYA,QAAG,OAAOF,SAAP,KAAqB,SAAxB,EAAkC;AAChCA,kBAAYA,YAAYN,OAAOC,iBAAnB,GAAuCD,OAAOS,iBAA1D;AACD;;AAED,WAAO,sBAASH,SAAT,KAAuB,wBAAWA,SAAX,CAAvB,GACP,mBAAQT,IAAR,EAAca,IAAd,CAAmB,UAACH,CAAD,EAAGC,CAAH;AAAA,aAAOH,SAASE,CAAT,EAAWC,CAAX,CAAP;AAAA,KAAnB,EAAyCT,MAAzC,CAAgD,CAAhD,EAAkDO,SAAlD,CADO,GAEP,mBAAQT,IAAR,EAAca,IAAd,CAAmB,UAACH,CAAD,EAAGC,CAAH;AAAA,aAAOH,SAASE,CAAT,EAAWC,CAAX,CAAP;AAAA,KAAnB,EAAyC,CAAzC,CAFA;AAGD,GApBM","sourcesContent":["import { \n  isArray,\n  isInfinity,\n  isNumber,\n  isEmpty,\n  likeRegexp,\n  likeString\n} from './isLike'\n\nimport {\n  asArray\n} from './cast'\n\nimport {\n  get\n} from './read'\n\n//reducer.spec.js\nexport const matchString = (it,search,at=0)=>{\n  if(typeof it !== \"string\") throw new Error(`matchString :: worng argument ${it}`);\n  if(typeof search === \"string\") search = search.replace(new RegExp(\"(\\\\.|\\\\[|\\\\])\",\"g\"),s=>`\\\\${s}`);\n  const result = it.substr(at).match(search);\n  return result ? [result.index+at, result[0].length] : [-1, 0];\n};\n\nexport const findIndex = (function(){\n  const __find_string = (it,search,at)=>it.indexOf(search,at);\n  const __find_regexp = (it,search,at)=>{\n    let i = it.substring(at || 0).search(search);\n    return (i >= 0) ? (i + (at || 0)) : i;\n  };\n  return (it,search,at)=>((search instanceof RegExp)?__find_regexp:__find_string)(it,search,at);\n}());\n\n//reducer.spec.js\nexport const findIndexes = (function(){\n  return function(c,s,at){\n      if(typeof c === \"string\" || typeof c === \"number\"){\n        var idxs=[], mvc=c+\"\", s=likeRegexp(s)?s:s+\"\", at=(!at || !isNumber(at) || at < 0)?0:at, next;\n        do {\n          let i = findIndex(c,s,at);\n          if(i > -1){\n            at = (s.length || 1) + i;\n            idxs.push(i); \n            next = true;\n          } else {\n            next = false;\n          }\n        } while(next)\n        return idxs;\n      }\n    }\n}());\n\n//reducer.spec.js\nexport const cut = function(collection,cutLength=1,emptyDefault=undefined){\n  let data = asArray(collection);\n  let fill = emptyDefault;\n  \n  if(data.length > cutLength){\n    data.splice(cutLength,Number.POSITIVE_INFINITY);\n    return data;\n  }\n  \n  let dataLength = data.length;\n  \n  if(typeof emptyDefault !== \"function\"){\n    fill = ()=>emptyDefault;\n  }\n  \n  for(let i=0,l=cutLength-dataLength;i<l;i++){\n    data.push(fill( dataLength++, i ));\n  }\n  \n  return data;\n}\n\n//reducer.spec.js\nexport const top = function(data,iteratee,topLength){\n  switch(typeof iteratee){\n  case \"function\":\n    //iteratee=iteratee;\n    break;\n  case \"boolean\":\n    iteratee=iteratee?(a,b)=>a<b:(a,b)=>a>b;\n    break;\n  default:\n    iteratee=(a,b)=>a<b;\n    break;\n  }\n  \n  if(typeof topLength === \"boolean\"){\n    topLength = topLength ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n  }\n  \n  return isNumber(topLength) || isInfinity(topLength) ?\n  asArray(data).sort((a,b)=>iteratee(a,b)).splice(0,topLength):\n  asArray(data).sort((a,b)=>iteratee(a,b))[0];\n};"],"file":"reducer.js"}