{"version":3,"sources":["../packages/pado/functions/matrix.js"],"names":["rangeModel","value","step","sizeBase","start","end","reverse","parseFloat","range","stepSize","sizeBaseRange","r","console","warn","i","l","push","domainRangeValue","domain","vs","nice","limit","v","sel","$range","$domain","dSize","sSize","dRate","calc","result","Math","floor","domainRangeInterpolate","_domain","_range","_nice","interpolate","matrixRange","scales","maxLength","length","selectLengthes","scaleIndex","rangeResult","reduce","redu","Array","turnSize","forEach","scaleCase","scaleCaseLength","time","validMatrix","arr","from","some","likeError","undefined","asMatrix","columnSize","rowCount","ceil","column","ci","multiplyMatrix","aMatrix","bMatrix","rRowIndex","columnLength","columnResult","rColumnIndex","multiplied","dist","num","index"],"mappings":";;;;;;;;;;;;;;;;;;;;AAMO,MAAMA,UAAU,GAAG,SAAbA,UAAa,CAAUC,KAAV,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAgC;AACxD,QAAIC,KAAJ,EAAWC,GAAX,EAAgBC,OAAhB;;AAEA,QAAG,OAAOL,KAAP,KAAiB,QAApB,EAA6B;AAC3BI,MAAAA,GAAG,GAAGJ,KAAN;AACAG,MAAAA,KAAK,GAAG,CAAR;AACD,KAHD,MAGO,IAAG,OAAOH,KAAP,KAAiB,QAApB,EAA6B;AAClCG,MAAAA,KAAK,GAAGH,KAAK,CAAC,CAAD,CAAb;AACAI,MAAAA,GAAG,GAAGJ,KAAK,CAAC,CAAD,CAAX;;AAEA,UAAG,CAACC,IAAD,IAAS,OAAOD,KAAK,CAAC,CAAD,CAAZ,KAAoB,QAAhC,EAAyC;AACvCC,QAAAA,IAAI,GAAGD,KAAK,CAAC,CAAD,CAAZ;AACD;;AAED,UAAG,OAAOE,QAAP,KAAoB,SAAvB,EAAiC;AAC/BA,QAAAA,QAAQ,GAAG,KAAX;AACD;AACF;AAED;;;;;;;;;AAQA,QAAGC,KAAK,GAAGC,GAAX,EAAe;AACbC,MAAAA,OAAO,GAAGD,GAAV;AACAA,MAAAA,GAAG,GAAGD,KAAN;AACAA,MAAAA,KAAK,GAAGE,OAAR;AACAA,MAAAA,OAAO,GAAG,IAAV;AACD;;AAEDD,IAAAA,GAAG,GAAGE,UAAU,CAACF,GAAD,CAAhB;AACAA,IAAAA,GAAG,GAAG,2BAAcA,GAAd,IAAqB,CAArB,GAAyBA,GAA/B;AACAD,IAAAA,KAAK,GAAGG,UAAU,CAACH,KAAD,CAAlB;AACAA,IAAAA,KAAK,GAAG,2BAAcA,KAAd,IAAuB,CAAvB,GAA2BA,KAAnC;AACAF,IAAAA,IAAI,GAAGK,UAAU,CAACL,IAAD,CAAjB;AACAA,IAAAA,IAAI,GAAG,2BAAcA,IAAd,KAAuBA,IAAI,IAAI,CAA/B,GAAmC,CAAnC,GAAuCA,IAA9C;AAEA,WAAO;AACLE,MAAAA,KAAK,EAALA,KADK;AAELC,MAAAA,GAAG,EAAHA,GAFK;AAGLH,MAAAA,IAAI,EAAJA,IAHK;AAILI,MAAAA,OAAO,EAAPA,OAJK;AAKLH,MAAAA,QAAQ,EAARA;AALK,KAAP;AAOD,GAhDM;;;;AAkDA,MAAMK,KAAK,GAAG,SAARA,KAAQ,CAAUP,KAAV,EAAiBQ,QAAjB,EAA2BC,aAA3B,EAAyC;AAC5D,QAAIC,CAAC,GAAG,EAAR;;AAD4D,sBAQxDX,UAAU,CAACC,KAAD,EAAQQ,QAAR,EAAkBC,aAAlB,CAR8C;AAAA,QAG1DN,KAH0D,eAG1DA,KAH0D;AAAA,QAI1DC,GAJ0D,eAI1DA,GAJ0D;AAAA,QAK1DH,IAL0D,eAK1DA,IAL0D;AAAA,QAM1DI,OAN0D,eAM1DA,OAN0D;AAAA,QAO1DH,QAP0D,eAO1DA,QAP0D;;AAU5D,QAAGD,IAAI,IAAI,CAAX,EAAa;AAAE,aAAOU,OAAO,CAACC,IAAR,CAAa,+BAAb,GAA+CF,CAAtD;AAAyD;;AAAA;;AACxE,QAAGR,QAAQ,IAAI,KAAf,EAAqB;AAAE,WAAI,IAAIW,CAAC,GAAGV,KAAR,EAAeW,CAAC,GAAGV,GAAvB,EAA4BS,CAAC,IAAIC,CAAjC,EAAoCD,CAAC,GAAGA,CAAC,GAAGZ,IAA5C;AAAkDS,QAAAA,CAAC,CAACK,IAAF,CAAOF,CAAP;AAAlD;AAA6D,KAApF,MAA0F;AAAE,WAAI,IAAIA,CAAC,GAAGV,KAAR,EAAeW,CAAC,GAAGV,GAAvB,EAA4BS,CAAC,GAAGC,CAAhC,EAAmCD,CAAC,GAAGA,CAAC,GAAGZ,IAA3C;AAAiDS,QAAAA,CAAC,CAACK,IAAF,CAAOF,CAAP;AAAjD;AAA4D;;AACxJ,WAAOR,OAAO,GAAGK,CAAC,CAACL,OAAF,EAAH,GAAiBK,CAA/B;AACD,GAbM;;;;AAeA,MAAMM,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAUC,MAAV,EAAkBV,KAAlB,EAAyBW,EAAzB,EAA6BC,IAA7B,EAAmCC,KAAnC,EAAyC;AACvE,WAAO,yBAAQ,qBAAUF,EAAV,CAAR,EAAuB,UAAUG,CAAV,EAAaC,GAAb,EAAiB;AAC7C,UAAMC,MAAM,GAAID,GAAG,GAAGf,KAAK,CAACe,GAAD,CAAR,GAAgBf,KAAnC;AACA,UAAMiB,OAAO,GAAGF,GAAG,GAAGL,MAAM,CAACK,GAAD,CAAT,GAAiBL,MAApC;;AACA,UAAG,CAACM,MAAD,IAAW,CAACC,OAAf,EAAuB;AAAE,eAAOH,CAAP;AAAU;;AAEnC,UAAMI,KAAK,GAAGD,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAlC;AACA,UAAME,KAAK,GAAGH,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAhC;AACA,UAAMI,KAAK,GAAG,CAACN,CAAC,GAAGG,OAAO,CAAC,CAAD,CAAZ,IAAmBC,KAAjC;AACA,UAAMG,IAAI,GAAIL,MAAM,CAAC,CAAD,CAAN,GAAYG,KAAK,GAAGC,KAAlC;AACA,UAAME,MAAM,GAAGV,IAAI,GAAGW,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAH,GAAsBA,IAAzC;AAEA,aAAOR,KAAK,GACRG,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAlB,GACE,wBAAYM,MAAZ,EAAoBN,MAAM,CAAC,CAAD,CAA1B,EAA+BA,MAAM,CAAC,CAAD,CAArC,CADF,GAEE,wBAAYM,MAAZ,EAAoBN,MAAM,CAAC,CAAD,CAA1B,EAA+BA,MAAM,CAAC,CAAD,CAArC,CAHM,GAIRM,MAJJ;AAKD,KAhBM,CAAP;AAiBD,GAlBM;;;;AAoBA,MAAMG,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAUf,MAAV,EAAkBV,KAAlB,EAAyBY,IAAzB,EAA+BC,KAA/B,EAAqC;AACzE,QAAIa,OAAO,GAAGhB,MAAd;AACA,QAAIiB,MAAM,GAAI3B,KAAd;AACA,QAAI4B,KAAK,GAAKhB,IAAd;;AAEA,QAAMiB,WAAW,GAAG,SAAdA,WAAc,CAACpC,KAAD;AAAA,aAASgB,gBAAgB,CAACiB,OAAD,EAAUC,MAAV,EAAkBlC,KAAlB,EAAyBmC,KAAzB,EAAgCf,KAAhC,CAAzB;AAAA,KAApB;;AAEAgB,IAAAA,WAAW,CAACnB,MAAZ,GAAqB,UAACA,MAAD,EAAU;AAC7BgB,MAAAA,OAAO,GAAGhB,MAAV;AACA,aAAOmB,WAAP;AACD,KAHD;;AAIAA,IAAAA,WAAW,CAAC7B,KAAZ,GAAoB,UAACA,KAAD,EAAS;AAC3B2B,MAAAA,MAAM,GAAG3B,KAAT;AACA,aAAO6B,WAAP;AACD,KAHD;;AAIAA,IAAAA,WAAW,CAACjB,IAAZ,GAAmB,UAACA,IAAD,EAAQ;AACzBgB,MAAAA,KAAK,GAAGhB,IAAR;AACA,aAAOiB,WAAP;AACD,KAHD;;AAKA,WAAOA,WAAP;AACD,GArBM,C,CAuBP;AACA;;;;;AAEO,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAUlC,KAAV,EAAiBC,GAAjB,EAAsBH,IAAtB,EAA4BC,QAA5B,EAAqC;AAC9D,QAAIoC,MAAM,GAAG,EAAb;AACA,QAAIC,SAAS,GAAG,iBAAI,CAACpC,KAAK,CAACqC,MAAP,EAAepC,GAAG,CAACoC,MAAnB,CAAJ,CAAhB;AAEA,QAAIC,cAAc,GAAG,uBAAMF,SAAN,EAAiB,UAAUG,UAAV,EAAqB;AACzD,UAAMC,WAAW,GAAGpC,KAAK,CAAC,CAACJ,KAAK,CAACuC,UAAD,CAAN,EAAoBtC,GAAG,CAACsC,UAAD,CAAvB,CAAD,EAAuCzC,IAAvC,EAA6CC,QAA7C,CAAzB;AACAoC,MAAAA,MAAM,CAACvB,IAAP,CAAY4B,WAAZ;AACA,aAAOA,WAAW,CAACH,MAAnB;AACD,KAJoB,CAArB;AAMA,QAAIX,MAAM,GAAG,uBAAMY,cAAc,CAACG,MAAf,CAAsB,UAAUC,IAAV,EAAgB7C,KAAhB,EAAsB;AAC7D,aAAO6C,IAAI,GAAG7C,KAAd;AACD,KAFkB,EAEhB,CAFgB,CAAN,EAEN,YAAW;AAAE,aAAO,IAAI8C,KAAJ,CAAUP,SAAV,CAAP;AAA6B,KAFpC,CAAb;AAIA,QAAIQ,QAAQ,GAAG,CAAf;AAGA,uBAAQT,MAAR,EAAgBU,OAAhB,CAAwB,UAACC,SAAD,EAAYP,UAAZ,EAAyB;AAC/C,UAAIQ,eAAe,GAAGD,SAAS,CAACT,MAAhC;AACA,6BAAMX,MAAM,CAACW,MAAb,EAAqB,UAAUW,IAAV,EAAe;AAClCtB,QAAAA,MAAM,CAACsB,IAAD,CAAN,CAAaT,UAAb,IAA2BO,SAAS,CAAC,iBAAKE,IAAL,EAAWD,eAAX,EAA4BH,QAA5B,CAAD,CAApC;AACD,OAFD;AAGAA,MAAAA,QAAQ,GAAGA,QAAQ,GAAGG,eAAtB;AACD,KAND;AAQA,WAAOrB,MAAP;AACD,GA1BM,C,CA4BP;;;;;AACO,MAAMuB,WAAW,GAAG,SAAdA,WAAc,CAAUC,GAAV,EAAc;AACvC;AACA,QAAG,CAAC,uBAAUA,GAAV,CAAJ,EAAmB;AACjB,aAAO,KAAP;AACD,KAJsC,CAMvC;;;AACA,QAAGA,GAAG,CAACb,MAAJ,KAAe,CAAlB,EAAoB;AAClB,aAAO,IAAP;AACD,KATsC,CAWvC;;;AACA,WAAO,CAACM,KAAK,CAACQ,IAAN,CAAWD,GAAX,EAAgBE,IAAhB,CAAqB,UAAClC,CAAD,EAAK;AAChC,UAAG,uBAAUA,CAAV,CAAH,EAAgB;AACd;AACA,YAAGA,CAAC,CAACmB,MAAF,KAAaa,GAAG,CAACb,MAApB,EAA4B,OAAO,IAAP,CAFd,CAGd;;AACA,eAAOnB,CAAC,CAACkC,IAAF,CAAO,UAAAC,SAAS;AAAA,iBAAE,EAAEA,SAAS,IAAIC,SAAb,IAA0B,sBAASD,SAAT,CAA5B,CAAF;AAAA,SAAhB,CAAP;AACD;;AACD,aAAO,IAAP;AACD,KARO,CAAR;AASD,GArBM,C,CAuBP;;;;;AACO,MAAME,QAAQ,GAAG,SAAXA,QAAW,CAAUL,GAAV,EAAeM,UAAf,EAA0B;AAChD,QAAM9B,MAAM,GAAG,EAAf;;AACA,QAAG,OAAO8B,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,GAAG,CAAlD,EAAoD;AAClD,UAAMC,QAAQ,GAAG9B,IAAI,CAAC+B,IAAL,CAAUR,GAAG,CAACb,MAAJ,GAAamB,UAAvB,CAAjB;AACA,6BAAMC,QAAN,EAAgB,UAAA/C,CAAC,EAAE;AACjB,YAAMiD,MAAM,GAAG,EAAf;AACA,+BAAMH,UAAN,EAAkB,UAAAI,EAAE,EAAE;AAAED,UAAAA,MAAM,CAAC/C,IAAP,CAAYsC,GAAG,CAACxC,CAAC,GAAG8C,UAAJ,GAAiBI,EAAlB,CAAf;AAAuC,SAA/D;AACAlC,QAAAA,MAAM,CAACd,IAAP,CAAY+C,MAAZ;AACD,OAJD;AAKD,KAPD,MAOO;AACL,aAAO,CAACT,GAAD,CAAP;AACD;;AACD,WAAOxB,MAAP;AACD,GAbM;;;;AAeA,MAAMmC,cAAc,GAAG,SAAjBA,cAAiB,CAAUC,OAAV,EAAmBC,OAAnB,EAA2B;AACvD,QAAG,CAACd,WAAW,CAACa,OAAD,CAAZ,IAAyBb,WAAW,CAACc,OAAD,CAAvC,EAAiD;AAC/C,aAAO,IAAP;AACD;;AACD,QAAGD,OAAO,CAAC,CAAD,CAAP,CAAWzB,MAAX,KAAsB0B,OAAO,CAAC1B,MAAjC,EAAwC;AACtC,aAAO,IAAP;AACD;;AACD,QAAMX,MAAM,GAAG,EAAf;AACA,2BAAMqC,OAAO,CAAC1B,MAAd,EAAsB,UAAA2B,SAAS,EAAE;AAC/B,UAAMC,YAAY,GAAGF,OAAO,CAACC,SAAD,CAAP,CAAmB3B,MAAxC;AACA,UAAM6B,YAAY,GAAG,EAArB;AACA,6BAAMD,YAAN,EAAoB,UAAAE,YAAY,EAAE;AAChC;AACA,YAAMC,UAAU,GAAGN,OAAO,CAACE,SAAD,CAAP,CAAmBvB,MAAnB,CAA0B,UAAC4B,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAoB;AAC/D;AACA,iBAAOD,GAAG,GAAGP,OAAO,CAACQ,KAAD,CAAP,CAAeJ,YAAf,CAAN,GAAqCE,IAA5C;AACD,SAHkB,EAGhB,CAHgB,CAAnB,CAFgC,CAMhC;;AACAH,QAAAA,YAAY,CAACtD,IAAb,CAAkBwD,UAAlB;AACD,OARD;AASA1C,MAAAA,MAAM,CAACd,IAAP,CAAYsD,YAAZ;AACD,KAbD;AAcA,WAAOxC,MAAP;AACD,GAvBM","sourcesContent":["import { asArray, cloneDeep } from './cast'\nimport { likeArray, isNumber, isAbsoluteNaN } from './isLike'\nimport { top } from './reduce'\nimport { turn, limitNumber } from './nice'\nimport { hashMap, times } from './enumerable'\n\nexport const rangeModel = function (value, step, sizeBase){\n  let start, end, reverse\n  \n  if(typeof value === \"number\"){\n    end = value\n    start = 0\n  } else if(typeof value === \"object\"){\n    start = value[0]\n    end = value[1]\n      \n    if(!step && typeof value[2] === \"number\"){\n      step = value[2]\n    }\n      \n    if(typeof sizeBase !== \"boolean\"){\n      sizeBase = false\n    }\n  }\n  \n  /*\n  if(typeof start !== \"number\" || typeof end !== \"number\"){\n    if(typeof start !== \"number\" && typeof end !== \"number\") return r\n    if(typeof start === \"number\") return r.push(start), r\n    if(typeof end === \"number\") return r.push(end), r\n  }\n  */\n  \n  if(start > end){\n    reverse = end\n    end = start\n    start = reverse\n    reverse = true\n  }\n  \n  end = parseFloat(end)\n  end = isAbsoluteNaN(end) ? 0 : end\n  start = parseFloat(start)\n  start = isAbsoluteNaN(start) ? 0 : start\n  step = parseFloat(step)\n  step = isAbsoluteNaN(step) || step == 0 ? 1 : step\n  \n  return {\n    start,\n    end,\n    step,\n    reverse,\n    sizeBase\n  }\n}\n\nexport const range = function (value, stepSize, sizeBaseRange){\n  let r = []\n  let {\n    start,\n    end,\n    step,\n    reverse,\n    sizeBase\n  } = rangeModel(value, stepSize, sizeBaseRange)\n  \n  if(step <= 0){ return console.warn(\"range::not support minus step\"), r };\n  if(sizeBase == false){ for(var i = start, l = end; i <= l; i = i + step) r.push(i) } else { for(var i = start, l = end; i < l; i = i + step) r.push(i) }\n  return reverse ? r.reverse() : r\n}\n\nexport const domainRangeValue = function (domain, range, vs, nice, limit){\n  return hashMap(cloneDeep(vs), function (v, sel){\n    const $range  = sel ? range[sel] : range\n    const $domain = sel ? domain[sel] : domain\n    if(!$range || !$domain){ return v }\n                    \n    const dSize = $domain[1] - $domain[0]\n    const sSize = $range[1] - $range[0]\n    const dRate = (v - $domain[0]) / dSize\n    const calc  = $range[0] + sSize * dRate\n    const result = nice ? Math.floor(calc) : calc\n    \n    return limit \n      ? $range[1] > $range[0] \n        ? limitNumber(result, $range[1], $range[0])\n        : limitNumber(result, $range[0], $range[1])\n      : result\n  })\n}\n\nexport const domainRangeInterpolate = function (domain, range, nice, limit){\n  let _domain = domain\n  let _range  = range\n  let _nice   = nice\n  \n  const interpolate = (value)=>domainRangeValue(_domain, _range, value, _nice, limit)\n  \n  interpolate.domain = (domain)=>{\n    _domain = domain\n    return interpolate\n  }\n  interpolate.range = (range)=>{\n    _range = range\n    return interpolate\n  }\n  interpolate.nice = (nice)=>{\n    _nice = nice\n    return interpolate\n  }\n  \n  return interpolate\n}\n\n//matrixRange([1],[3]) // [[1], [2], [3]] \n//matrixRange([1,1],[3,3]) // [[1, 1], [2, 1], [3, 1], [1, 2], [2, 2], [3, 2], [1, 3], [2, 3], [3, 3]]\n\nexport const matrixRange = function (start, end, step, sizeBase){\n  var scales = []\n  var maxLength = top([start.length, end.length])\n    \n  var selectLengthes = times(maxLength, function (scaleIndex){\n    const rangeResult = range([start[scaleIndex], end[scaleIndex]], step, sizeBase)\n    scales.push(rangeResult)\n    return rangeResult.length\n  })\n\n  var result = times(selectLengthes.reduce(function (redu, value){\n    return redu * value\n  }, 1), function (){ return new Array(maxLength) })\n    \n  var turnSize = 1\n  \n  \n  asArray(scales).forEach((scaleCase, scaleIndex)=>{\n    var scaleCaseLength = scaleCase.length\n    times(result.length, function (time){\n      result[time][scaleIndex] = scaleCase[turn(time, scaleCaseLength, turnSize)]\n    })\n    turnSize = turnSize * scaleCaseLength\n  })\n    \n  return result\n}\n\n//validate matrix format\nexport const validMatrix = function (arr){\n  // Matrix must be array\n  if(!likeArray(arr)){\n    return false\n  }\n  \n  // Empty is valid\n  if(arr.length === 0){\n    return true\n  }\n  \n  //find some error ( return true => false)\n  return !Array.from(arr).some((v)=>{\n    if(likeArray(v)){\n      //length check\n      if(v.length !== arr.length) return true\n      //type check\n      return v.some(likeError=>!(likeError == undefined || isNumber(likeError)))\n    }\n    return true\n  })\n}\n\n// real matrix model\nexport const asMatrix = function (arr, columnSize){\n  const result = []\n  if(typeof columnSize === \"number\" && columnSize > 0){\n    const rowCount = Math.ceil(arr.length / columnSize)\n    times(rowCount, i=>{\n      const column = []\n      times(columnSize, ci=>{ column.push(arr[i * columnSize + ci]) })\n      result.push(column)\n    })\n  } else {\n    return [arr]\n  }\n  return result\n}\n\nexport const multiplyMatrix = function (aMatrix, bMatrix){\n  if(!validMatrix(aMatrix) && validMatrix(bMatrix)){\n    return null\n  }\n  if(aMatrix[0].length !== bMatrix.length){\n    return null\n  }\n  const result = []\n  times(bMatrix.length, rRowIndex=>{\n    const columnLength = bMatrix[rRowIndex].length\n    const columnResult = []\n    times(columnLength, rColumnIndex=>{\n      //var calcLog = [];\n      const multiplied = aMatrix[rRowIndex].reduce((dist, num, index)=>{\n        //calcLog.push(`${num} * ${bMatrix[index][rColumnIndex]}`)\n        return num * bMatrix[index][rColumnIndex] + dist\n      }, 0)\n      //console.log(\"calcLog\",calcLog.join(\" + \"))\n      columnResult.push(multiplied)\n    })\n    result.push(columnResult)\n  })\n  return result\n}\n"],"file":"matrix.js"}