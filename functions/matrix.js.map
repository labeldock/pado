{"version":3,"sources":["../.src/src/functions/matrix.js"],"names":["rangeModel","value","step","sizeBase","start","end","reverse","r","push","parseFloat","range","stepSize","sizeBaseRange","console","warn","i","l","domainRangeValue","domain","vs","nice","forMap","v","sel","$range","$domain","dSize","sSize","dRate","calc","Math","floor","matrixRange","scales","maxLength","length","selectLengthes","scaleIndex","result","reduce","redu","Array","turnSize","each","scaleCase","scaleCaseLength","time"],"mappings":"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","sourcesContent":["import { cloneDeep } from './cast'\nimport { isAbsoluteNaN } from './isLike'\nimport { top, turn } from './reducer';\nimport { times } from './enumerable';\n\nexport const rangeModel = function(value,step,sizeBase){\n  var start,end,reverse;\n  \n  if(typeof value === \"number\"){\n    end   = value;\n    start = 0;\n  } else if(typeof value === \"object\"){\n    start = value[0];\n    end   = value[1];\n      \n    if(!step && typeof value[2] === \"number\"){\n      step = value[2];\n    }\n      \n    if(typeof sizeBase !== \"boolean\"){\n      sizeBase=false;\n    }\n  }\n  \n  if(typeof start !== \"number\" || typeof end !== \"number\"){\n    if(typeof start !== \"number\" && typeof end !== \"number\") return r;\n    if(typeof start === \"number\") return r.push(start),r;\n    if(typeof end   === \"number\") return r.push(end)  ,r;\n  }\n  \n  if(start > end){\n    reverse = end;\n    end     = start;\n    start   = reverse;\n    reverse = true;\n  }\n  \n  end=parseFloat(end),end=isAbsoluteNaN(end)?0:end;\n  start=parseFloat(start),start=isAbsoluteNaN(start)?0:start;\n  step=parseFloat(step),step=isAbsoluteNaN(step)||step==0?1:step;\n  \n  return {\n    start,\n    end,\n    step,\n    reverse,\n    sizeBase\n  }\n};\n\nexport const range = function(value,stepSize,sizeBaseRange){\n  let r=[];\n  let {\n    start,\n    end,\n    step,\n    reverse,\n    sizeBase\n  } = rangeModel(value,stepSize,sizeBaseRange);\n  \n  if(step <= 0){ return console.warn(\"range::not support minus step\"),r;};\n  if(sizeBase==false){ for(var i=start,l=end;i<=l;i=i+step) r.push(i); } else { for(var i=start,l=end;i<l;i=i+step) r.push(i); }\n  return reverse ? r.reverse() : r;\n}\n\nexport const domainRangeValue = function(domain,range,vs,nice){\n  return forMap(cloneDeep(vs),function(v,sel){\n    var $range  = sel ? range[sel]  : range;\n    var $domain = sel ? domain[sel] : domain;\n    if(!$range || !$domain){ return v; }\n                    \n    var dSize = $domain[1] - $domain[0];\n    var sSize = $range[1] - $range[0];\n    var dRate = (v - $domain[0]) / dSize;\n    var calc  = $range[0] + sSize * dRate;\n                    \n    return nice ? Math.floor(calc) : calc;\n  });\n};\n\n//matrixRange([1],[3]) // [[1], [2], [3]] \n//matrixRange([1,1],[3,3]) // [[1, 1], [2, 1], [3, 1], [1, 2], [2, 2], [3, 2], [1, 3], [2, 3], [3, 3]]\n\nexport const matrixRange = function(start,end,step,sizeBase){\n  var scales=[];\n  var maxLength = top([start.length,end.length]);\n    \n  var selectLengthes = times(maxLength,function(scaleIndex){\n    var range = range([start[scaleIndex],end[scaleIndex]],step,sizeBase)\n    scales.push(range);\n    return range.length;\n  });\n\n  var result = times(reduce(selectLengthes,function(redu,value){\n    return redu * value;\n  },1),function(){ return new Array(maxLength); });\n    \n  var turnSize = 1;\n  \n  each(scales,function(scaleCase,scaleIndex){\n    var scaleCaseLength = scaleCase.length;\n    times(result.length,function(time){\n      result[time][scaleIndex] = scaleCase[turn(time,scaleCaseLength,turnSize)];\n    });\n    turnSize = turnSize * scaleCaseLength;\n  });\n    \n  return result;\n};"],"file":"matrix.js"}