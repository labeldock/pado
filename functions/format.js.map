{"version":3,"sources":["../packages/pado/functions/format.js"],"names":["humanReadableBytes","bytes","unit","exp","Math","floor","log","pre","charAt","pow","toFixed","humanReadableBytesValue","byteString","test","ceil","Number","parse","exec","number","unitIndex","indexOf","toUpperCase"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAO,MAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,KAAD,EAAS;AACzC,QAAIC,IAAI,GAAG,IAAX;AACA,QAAID,KAAK,GAAGC,IAAZ,EAAkB,OAAOD,KAAK,GAAG,IAAf;AAClB,QAAIE,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASL,KAAT,IAAkBG,IAAI,CAACE,GAAL,CAASJ,IAAT,CAA7B,CAAV;AACA,QAAIK,GAAG,GAAG,SAASC,MAAT,CAAgBL,GAAG,GAAG,CAAtB,CAAV;AACA,WAAO,CAACF,KAAK,GAAGG,IAAI,CAACK,GAAL,CAASP,IAAT,EAAeC,GAAf,CAAT,EAA8BO,OAA9B,CAAsC,CAAtC,IAA2C,GAA3C,GAAiDH,GAAjD,GAAuD,GAA9D;AACD,GANM;;;;AAQA,MAAMI,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,UAAD,EAAc;AACnD,QAAG,OAAOA,UAAP,KAAsB,QAAzB,EAAkC;AAChC,aAAOA,UAAP;AACD;;AAED,QAAG,yBAAyBC,IAAzB,CAA8BD,UAA9B,CAAH,EAA6C;AAC3C,aAAOR,IAAI,CAACU,IAAL,CAAUC,MAAM,CAACH,UAAD,CAAhB,CAAP;AACD;;AAED,QAAMI,KAAK,GAAG,8CAA8CC,IAA9C,CAAmDL,UAAnD,CAAd;AACA,QAAG,CAACI,KAAJ,EAAW,OAAO,IAAP;AAEX,QAAME,MAAM,GAAGF,KAAK,CAAC,CAAD,CAApB;AACA,QAAMd,IAAI,GAAGc,KAAK,CAAC,CAAD,CAAlB;AACA,QAAGE,MAAM,IAAI,CAAb,EAAgB,OAAO,CAAP;AAChB,QAAGhB,IAAI,KAAK,EAAZ,EAAgB,OAAOa,MAAM,CAACG,MAAD,CAAb;AAChB,QAAMC,SAAS,GAAG,SAASC,OAAT,CAAiBlB,IAAI,CAACmB,WAAL,EAAjB,CAAlB;;AAEA,QAAGF,SAAS,IAAI,CAAhB,EAAkB;AAChB,aAAOf,IAAI,CAACU,IAAL,CAAUI,MAAM,GAAGd,IAAI,CAACK,GAAL,CAAS,IAAT,EAAeU,SAAS,GAAC,CAAzB,CAAnB,CAAP;AACD;;AAED,WAAO,IAAP;AACD,GAvBM","sourcesContent":["export const humanReadableBytes = (bytes)=>{\n  var unit = 1024;\n  if (bytes < unit) return bytes + \" B\";\n  var exp = Math.floor(Math.log(bytes) / Math.log(unit));\n  var pre = \"KMGTPE\".charAt(exp - 1);\n  return (bytes / Math.pow(unit, exp)).toFixed(2) + ' ' + pre + 'B';\n}\n\nexport const humanReadableBytesValue = (byteString)=>{\n  if(typeof byteString === \"number\"){\n    return byteString;\n  }\n  \n  if(/^(|\\.|[0-9]+\\.)[0-9]+$/.test(byteString)){\n    return Math.ceil(Number(byteString));\n  }\n  \n  const parse = /((|\\.|[0-9]+\\.)[0-9]+)[\\s]*(|K|M|G|T|P|E)B/i.exec(byteString);\n  if(!parse) return null;\n  \n  const number = parse[1];\n  const unit = parse[3];\n  if(number == 0) return 0;\n  if(unit === \"\") return Number(number);\n  const unitIndex = \"KMGTPE\".indexOf(unit.toUpperCase());\n  \n  if(unitIndex >= 0){\n    return Math.ceil(number * Math.pow(1024, unitIndex+1));\n  }\n  \n  return null;\n};\n"],"file":"format.js"}