{"version":3,"sources":["../.src/functions/reduce.js"],"names":["cut","collection","cutLength","emptyDefault","undefined","data","fill","length","splice","Number","POSITIVE_INFINITY","dataLength","i","l","push","top","iteratee","topLength","path","a","b","NEGATIVE_INFINITY","sort"],"mappings":";;;;;;;;;;;;;;;;;;;;AAaA;AACO,MAAMA,MAAM,SAANA,GAAM,CAAUC,UAAV,EAAsBC,SAAtB,EAAqCC,YAArC,EAA8D;AAAA,QAAxCD,SAAwC;AAAxCA,eAAwC,GAA5B,CAA4B;AAAA;;AAAA,QAAzBC,YAAyB;AAAzBA,kBAAyB,GAAVC,SAAU;AAAA;;AAC/E,QAAIC,OAAO,mBAAQJ,UAAR,CAAX;AACA,QAAIK,OAAOH,YAAX;;AAEA,QAAGE,KAAKE,MAAL,GAAcL,SAAjB,EAA2B;AACzBG,WAAKG,MAAL,CAAYN,SAAZ,EAAuBO,OAAOC,iBAA9B;AACA,aAAOL,IAAP;AACD;;AAED,QAAIM,aAAaN,KAAKE,MAAtB;;AAEA,QAAG,OAAOJ,YAAP,KAAwB,UAA3B,EAAsC;AACpCG,aAAO;AAAA,eAAIH,YAAJ;AAAA,OAAP;AACD;;AAED,SAAI,IAAIS,IAAI,CAAR,EAAWC,IAAIX,YAAYS,UAA/B,EAA2CC,IAAIC,CAA/C,EAAkDD,GAAlD,EAAsD;AACpDP,WAAKS,IAAL,CAAUR,KAAKK,YAAL,EAAmBC,CAAnB,CAAV;AACD;;AAED,WAAOP,IAAP;AACD,GApBM,C,CAsBP;;;;;AACO,MAAMU,MAAM,SAANA,GAAM,CAAUV,IAAV,EAAgBW,QAAhB,EAA0BC,SAA1B,EAAoC;AACrD,YAAQ,OAAOD,QAAf;AACE,WAAK,UAAL;AACA;AACE;;AACF,WAAK,QAAL;AACE,YAAME,OAAOF,QAAb;;AACAA,mBAAW,kBAACG,CAAD,EAAIC,CAAJ;AAAA,iBAAQ,eAAID,CAAJ,EAAOD,IAAP,IAAe,eAAIE,CAAJ,EAAOF,IAAP,CAAvB;AAAA,SAAX;;AACA;;AACF,WAAK,SAAL;AACEF,mBAAWA,WAAW,UAACG,CAAD,EAAIC,CAAJ;AAAA,iBAAQD,IAAIC,CAAZ;AAAA,SAAX,GAA2B,UAACD,CAAD,EAAIC,CAAJ;AAAA,iBAAQD,IAAIC,CAAZ;AAAA,SAAtC;AACA;;AACF;AACEJ,mBAAW,kBAACG,CAAD,EAAIC,CAAJ;AAAA,iBAAQD,IAAIC,CAAZ;AAAA,SAAX;;AACA;AAbJ;;AAgBA,QAAG,OAAOH,SAAP,KAAqB,SAAxB,EAAkC;AAChCA,kBAAYA,YAAYR,OAAOC,iBAAnB,GAAuCD,OAAOY,iBAA1D;AACD;;AAED,WAAO,sBAASJ,SAAT,KAAuB,wBAAWA,SAAX,CAAvB,GACH,mBAAQZ,IAAR,EAAciB,IAAd,CAAmB,UAACH,CAAD,EAAIC,CAAJ;AAAA,aAAQJ,SAASG,CAAT,EAAYC,CAAZ,CAAR;AAAA,KAAnB,EAA2CZ,MAA3C,CAAkD,CAAlD,EAAqDS,SAArD,CADG,GAEH,mBAAQZ,IAAR,EAAciB,IAAd,CAAmB,UAACH,CAAD,EAAIC,CAAJ;AAAA,aAAQJ,SAASG,CAAT,EAAYC,CAAZ,CAAR;AAAA,KAAnB,EAA2C,CAA3C,CAFJ;AAGD,GAxBM","sourcesContent":["import { \n  isInfinity,\n  isNumber\n} from './isLike'\n\nimport {\n  asArray\n} from './cast'\n\nimport {\n  get\n} from './read'\n\n//reduce.spec.js\nexport const cut = function (collection, cutLength = 1, emptyDefault = undefined){\n  let data = asArray(collection)\n  let fill = emptyDefault\n  \n  if(data.length > cutLength){\n    data.splice(cutLength, Number.POSITIVE_INFINITY)\n    return data\n  }\n  \n  let dataLength = data.length\n  \n  if(typeof emptyDefault !== \"function\"){\n    fill = ()=>emptyDefault\n  }\n  \n  for(let i = 0, l = cutLength - dataLength; i < l; i++){\n    data.push(fill(dataLength++, i))\n  }\n  \n  return data\n}\n\n//reduce.spec.js\nexport const top = function (data, iteratee, topLength){\n  switch (typeof iteratee){\n    case \"function\":\n    //iteratee=iteratee;\n      break\n    case \"string\":\n      const path = iteratee\n      iteratee = (a, b)=>get(a, path) < get(b, path)\n      break\n    case \"boolean\":\n      iteratee = iteratee ? (a, b)=>a < b : (a, b)=>a > b\n      break\n    default:\n      iteratee = (a, b)=>a < b\n      break\n  }\n  \n  if(typeof topLength === \"boolean\"){\n    topLength = topLength ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY\n  }\n  \n  return isNumber(topLength) || isInfinity(topLength)\n    ? asArray(data).sort((a, b)=>iteratee(a, b)).splice(0, topLength)\n    : asArray(data).sort((a, b)=>iteratee(a, b))[0]\n}\n"],"file":"reduce.js"}