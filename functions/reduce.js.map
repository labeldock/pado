{"version":3,"sources":["../.src/src/functions/reduce.js"],"names":["cut","collection","cutLength","emptyDefault","undefined","data","fill","length","splice","Number","POSITIVE_INFINITY","dataLength","i","l","push","top","iteratee","topLength","a","b","NEGATIVE_INFINITY","sort"],"mappings":";;;;;;;;;;;;;;;;;;;;AASA;AACO,MAAMA,MAAM,SAANA,GAAM,CAASC,UAAT,EAAoBC,SAApB,EAAgCC,YAAhC,EAAuD;AAAA,QAAnCD,SAAmC;AAAnCA,eAAmC,GAAzB,CAAyB;AAAA;;AAAA,QAAvBC,YAAuB;AAAvBA,kBAAuB,GAAVC,SAAU;AAAA;;AACxE,QAAIC,OAAO,mBAAQJ,UAAR,CAAX;AACA,QAAIK,OAAOH,YAAX;;AAEA,QAAGE,KAAKE,MAAL,GAAcL,SAAjB,EAA2B;AACzBG,WAAKG,MAAL,CAAYN,SAAZ,EAAsBO,OAAOC,iBAA7B;AACA,aAAOL,IAAP;AACD;;AAED,QAAIM,aAAaN,KAAKE,MAAtB;;AAEA,QAAG,OAAOJ,YAAP,KAAwB,UAA3B,EAAsC;AACpCG,aAAO;AAAA,eAAIH,YAAJ;AAAA,OAAP;AACD;;AAED,SAAI,IAAIS,IAAE,CAAN,EAAQC,IAAEX,YAAUS,UAAxB,EAAmCC,IAAEC,CAArC,EAAuCD,GAAvC,EAA2C;AACzCP,WAAKS,IAAL,CAAUR,KAAMK,YAAN,EAAoBC,CAApB,CAAV;AACD;;AAED,WAAOP,IAAP;AACD,GApBM,C,CAsBP;;;;;AACO,MAAMU,MAAM,SAANA,GAAM,CAASV,IAAT,EAAcW,QAAd,EAAuBC,SAAvB,EAAiC;AAClD,YAAO,OAAOD,QAAd;AACA,WAAK,UAAL;AACE;AACA;;AACF,WAAK,SAAL;AACEA,mBAASA,WAAS,UAACE,CAAD,EAAGC,CAAH;AAAA,iBAAOD,IAAEC,CAAT;AAAA,SAAT,GAAoB,UAACD,CAAD,EAAGC,CAAH;AAAA,iBAAOD,IAAEC,CAAT;AAAA,SAA7B;AACA;;AACF;AACEH,mBAAS,kBAACE,CAAD,EAAGC,CAAH;AAAA,iBAAOD,IAAEC,CAAT;AAAA,SAAT;;AACA;AATF;;AAYA,QAAG,OAAOF,SAAP,KAAqB,SAAxB,EAAkC;AAChCA,kBAAYA,YAAYR,OAAOC,iBAAnB,GAAuCD,OAAOW,iBAA1D;AACD;;AAED,WAAO,sBAASH,SAAT,KAAuB,wBAAWA,SAAX,CAAvB,GACP,mBAAQZ,IAAR,EAAcgB,IAAd,CAAmB,UAACH,CAAD,EAAGC,CAAH;AAAA,aAAOH,SAASE,CAAT,EAAWC,CAAX,CAAP;AAAA,KAAnB,EAAyCX,MAAzC,CAAgD,CAAhD,EAAkDS,SAAlD,CADO,GAEP,mBAAQZ,IAAR,EAAcgB,IAAd,CAAmB,UAACH,CAAD,EAAGC,CAAH;AAAA,aAAOH,SAASE,CAAT,EAAWC,CAAX,CAAP;AAAA,KAAnB,EAAyC,CAAzC,CAFA;AAGD,GApBM","sourcesContent":["import { \n  isInfinity,\n  isNumber\n} from './isLike'\n\nimport {\n  asArray\n} from './cast'\n\n//reduce.spec.js\nexport const cut = function(collection,cutLength=1,emptyDefault=undefined){\n  let data = asArray(collection);\n  let fill = emptyDefault;\n  \n  if(data.length > cutLength){\n    data.splice(cutLength,Number.POSITIVE_INFINITY);\n    return data;\n  }\n  \n  let dataLength = data.length;\n  \n  if(typeof emptyDefault !== \"function\"){\n    fill = ()=>emptyDefault;\n  }\n  \n  for(let i=0,l=cutLength-dataLength;i<l;i++){\n    data.push(fill( dataLength++, i ));\n  }\n  \n  return data;\n}\n\n//reduce.spec.js\nexport const top = function(data,iteratee,topLength){\n  switch(typeof iteratee){\n  case \"function\":\n    //iteratee=iteratee;\n    break;\n  case \"boolean\":\n    iteratee=iteratee?(a,b)=>a<b:(a,b)=>a>b;\n    break;\n  default:\n    iteratee=(a,b)=>a<b;\n    break;\n  }\n  \n  if(typeof topLength === \"boolean\"){\n    topLength = topLength ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n  }\n  \n  return isNumber(topLength) || isInfinity(topLength) ?\n  asArray(data).sort((a,b)=>iteratee(a,b)).splice(0,topLength):\n  asArray(data).sort((a,b)=>iteratee(a,b))[0];\n};"],"file":"reduce.js"}