{"version":3,"sources":["../.src/functions/reduce.js"],"names":["cut","collection","cutLength","fillContent","useFill","arguments","length","cuts","result","rest","rowIndex","enumFn","index","push","top","data","iteratee","topLength","path","a","b","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","sort","splice"],"mappings":";;;;;;;;;;;;;;;;;;;;AAkBO,MAAMA,MAAM,SAANA,GAAM,CAAUC,UAAV,EAAsBC,SAAtB,EAAiCC,WAAjC,EAA6C;AAC9D,QAAMC,UAAUC,UAAUC,MAAV,GAAmB,CAAnC;AACA,WAAO,qBAAQL,UAAR,EAAoBC,SAApB,EAA+BC,WAA/B,EAA4CC,OAA5C,EAAqD,CAArD,CAAP;AACD,GAHM;;;;AAKA,MAAMG,OAAO,SAAPA,IAAO,CAAUN,UAAV,EAAsBC,SAAtB,EAAiCC,WAAjC,EAA6C;AAC/D,QAAMK,SAAS,EAAf;AACA,QAAIC,OAAOR,UAAX;AACA,QAAIS,WAAW,CAAf;AACA,QAAMC,SAAS,OAAOR,WAAP,KAAuB,UAAvB,GAAoC;AAAA,aAAIA,WAAJ;AAAA,KAApC,GAAsD,UAACS,KAAD;AAAA,aAAST,YAAYO,WAAWR,SAAX,GAAuBU,KAAnC,EAA0CA,KAA1C,EAAiDF,QAAjD,CAAT;AAAA,KAArE;AACA,QAAMN,UAAUC,UAAUC,MAAV,GAAmB,CAAnC;;AAEA,OAAG;AAAA,qBACqB,qBAAQG,IAAR,EAAcP,SAAd,EAAyBS,MAAzB,EAAiCP,OAAjC,CADrB;;AACCH,gBADD;AACaQ,UADb;AAEDD,aAAOK,IAAP,CAAYZ,UAAZ;AACAS;AACD,KAJD,QAIQD,KAAKH,MAAL,GAAc,CAJtB;;AAKA,WAAOE,MAAP;AACD,GAbM,C,CAeP;;;;;AACO,MAAMM,MAAM,SAANA,GAAM,CAAUC,IAAV,EAAgBC,QAAhB,EAA0BC,SAA1B,EAAoC;AACrD,YAAQ,OAAOD,QAAf;AACE,WAAK,UAAL;AACA;AACE;;AACF,WAAK,QAAL;AACE,YAAME,OAAOF,QAAb;;AACAA,mBAAW,kBAACG,CAAD,EAAIC,CAAJ;AAAA,iBAAQ,eAAID,CAAJ,EAAOD,IAAP,IAAe,eAAIE,CAAJ,EAAOF,IAAP,CAAvB;AAAA,SAAX;;AACA;;AACF,WAAK,SAAL;AACEF,mBAAWA,WAAW,UAACG,CAAD,EAAIC,CAAJ;AAAA,iBAAQD,IAAIC,CAAZ;AAAA,SAAX,GAA2B,UAACD,CAAD,EAAIC,CAAJ;AAAA,iBAAQD,IAAIC,CAAZ;AAAA,SAAtC;AACA;;AACF;AACEJ,mBAAW,kBAACG,CAAD,EAAIC,CAAJ;AAAA,iBAAQD,IAAIC,CAAZ;AAAA,SAAX;;AACA;AAbJ;;AAgBA,QAAG,OAAOH,SAAP,KAAqB,SAAxB,EAAkC;AAChCA,kBAAYA,YAAYI,OAAOC,iBAAnB,GAAuCD,OAAOE,iBAA1D;AACD;;AAED,WAAO,sBAASN,SAAT,KAAuB,wBAAWA,SAAX,CAAvB,GACH,mBAAQF,IAAR,EAAcS,IAAd,CAAmB,UAACL,CAAD,EAAIC,CAAJ;AAAA,aAAQJ,SAASG,CAAT,EAAYC,CAAZ,CAAR;AAAA,KAAnB,EAA2CK,MAA3C,CAAkD,CAAlD,EAAqDR,SAArD,CADG,GAEH,mBAAQF,IAAR,EAAcS,IAAd,CAAmB,UAACL,CAAD,EAAIC,CAAJ;AAAA,aAAQJ,SAASG,CAAT,EAAYC,CAAZ,CAAR;AAAA,KAAnB,EAA2C,CAA3C,CAFJ;AAGD,GAxBM","sourcesContent":["import {\n  baseCut\n} from './reduce.base'\n\nimport { \n  isInfinity,\n  isNumber\n} from './isLike'\n\nimport {\n  asArray\n} from './cast'\n\nimport {\n  get\n} from './read'\n\n\nexport const cut = function (collection, cutLength, fillContent){\n  const useFill = arguments.length > 2\n  return baseCut(collection, cutLength, fillContent, useFill)[0]\n}\n\nexport const cuts = function (collection, cutLength, fillContent){\n  const result = []\n  let rest = collection\n  let rowIndex = 0\n  const enumFn = typeof fillContent !== \"function\" ? ()=>fillContent : (index)=>fillContent(rowIndex * cutLength + index, index, rowIndex)\n  const useFill = arguments.length > 2\n  \n  do {\n    ([collection, rest] = baseCut(rest, cutLength, enumFn, useFill))\n    result.push(collection)\n    rowIndex++\n  } while(rest.length > 0)\n  return result\n}\n\n//reduce.spec.js\nexport const top = function (data, iteratee, topLength){\n  switch (typeof iteratee){\n    case \"function\":\n    //iteratee=iteratee;\n      break\n    case \"string\":\n      const path = iteratee\n      iteratee = (a, b)=>get(a, path) < get(b, path)\n      break\n    case \"boolean\":\n      iteratee = iteratee ? (a, b)=>a < b : (a, b)=>a > b\n      break\n    default:\n      iteratee = (a, b)=>a < b\n      break\n  }\n  \n  if(typeof topLength === \"boolean\"){\n    topLength = topLength ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY\n  }\n  \n  return isNumber(topLength) || isInfinity(topLength)\n    ? asArray(data).sort((a, b)=>iteratee(a, b)).splice(0, topLength)\n    : asArray(data).sort((a, b)=>iteratee(a, b))[0]\n}\n"],"file":"reduce.js"}