{"version":3,"sources":["../.src/functions/reduce.js"],"names":["cut","collection","cutLength","emptyDefault","fullResult","data","rest","length","splice","Number","POSITIVE_INFINITY","cuts","result","rowIndex","enumFn","index","push","top","iteratee","topLength","path","a","b","NEGATIVE_INFINITY","sort"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAiBA;AACO,MAAMA,MAAM,SAANA,GAAM,CAAUC,UAAV,EAAsBC,SAAtB,EAAiCC,YAAjC,EAA+CC,UAA/C,EAAkE;AAAA,QAAnBA,UAAmB;AAAnBA,gBAAmB,GAAN,KAAM;AAAA;;AACnF,QAAIC,OAAO,mBAAQJ,UAAR,CAAX;AAAgC,QAAIK,IAAJ;AAChCJ,gBAAY,sBAASA,SAAT,IAAsBA,SAAtB,GAAkC,CAA9C;;AAEA,QAAGG,KAAKE,MAAL,GAAcL,SAAjB,EAA2B;AACzBI,aAAOD,KAAKG,MAAL,CAAYN,SAAZ,EAAuBO,OAAOC,iBAA9B,CAAP;AACA,aAAON,eAAe,IAAf,GAAsB,CAACC,IAAD,EAAOC,IAAP,CAAtB,GAAqCD,IAA5C;AACD;;AAEDA,WAAO,kBAAKA,IAAL,EAAWH,SAAX,EAAsBC,YAAtB,CAAP;AACA,WAAOC,eAAe,IAAf,GAAsB,CAACC,IAAD,EAAO,EAAP,CAAtB,GAAmCA,IAA1C;AACD,GAXM;;;;AAaA,MAAMM,OAAO,SAAPA,IAAO,CAAUV,UAAV,EAAsBC,SAAtB,EAAiCC,YAAjC,EAA8C;AAChE,QAAMS,SAAS,EAAf;AACA,QAAIN,OAAOL,UAAX,CAFgE,CAGhE;;AACA,QAAIY,WAAW,CAAf;AACA,QAAMC,SAAS,OAAOX,YAAP,KAAwB,UAAxB,GAAqC;AAAA,aAAIA,YAAJ;AAAA,KAArC,GAAwD,UAACY,KAAD;AAAA,aAASZ,aAAaU,WAAWX,SAAX,GAAuBa,KAApC,EAA2CA,KAA3C,EAAkDF,QAAlD,CAAT;AAAA,KAAvE;;AAEA,OAAG;AAAA,iBACqBb,IAAIM,IAAJ,EAAUJ,SAAV,EAAqBY,MAArB,EAA6B,IAA7B,CADrB;;AACCb,gBADD;AACaK,UADb;AAEDM,aAAOI,IAAP,CAAYf,UAAZ;AACAY;AACD,KAJD,QAIQP,KAAKC,MAAL,GAAc,CAJtB;;AAKA,WAAOK,MAAP;AACD,GAbM,C,CAeP;;;;;AACO,MAAMK,MAAM,SAANA,GAAM,CAAUZ,IAAV,EAAgBa,QAAhB,EAA0BC,SAA1B,EAAoC;AACrD,YAAQ,OAAOD,QAAf;AACE,WAAK,UAAL;AACA;AACE;;AACF,WAAK,QAAL;AACE,YAAME,OAAOF,QAAb;;AACAA,mBAAW,kBAACG,CAAD,EAAIC,CAAJ;AAAA,iBAAQ,eAAID,CAAJ,EAAOD,IAAP,IAAe,eAAIE,CAAJ,EAAOF,IAAP,CAAvB;AAAA,SAAX;;AACA;;AACF,WAAK,SAAL;AACEF,mBAAWA,WAAW,UAACG,CAAD,EAAIC,CAAJ;AAAA,iBAAQD,IAAIC,CAAZ;AAAA,SAAX,GAA2B,UAACD,CAAD,EAAIC,CAAJ;AAAA,iBAAQD,IAAIC,CAAZ;AAAA,SAAtC;AACA;;AACF;AACEJ,mBAAW,kBAACG,CAAD,EAAIC,CAAJ;AAAA,iBAAQD,IAAIC,CAAZ;AAAA,SAAX;;AACA;AAbJ;;AAgBA,QAAG,OAAOH,SAAP,KAAqB,SAAxB,EAAkC;AAChCA,kBAAYA,YAAYV,OAAOC,iBAAnB,GAAuCD,OAAOc,iBAA1D;AACD;;AAED,WAAO,sBAASJ,SAAT,KAAuB,wBAAWA,SAAX,CAAvB,GACH,mBAAQd,IAAR,EAAcmB,IAAd,CAAmB,UAACH,CAAD,EAAIC,CAAJ;AAAA,aAAQJ,SAASG,CAAT,EAAYC,CAAZ,CAAR;AAAA,KAAnB,EAA2Cd,MAA3C,CAAkD,CAAlD,EAAqDW,SAArD,CADG,GAEH,mBAAQd,IAAR,EAAcmB,IAAd,CAAmB,UAACH,CAAD,EAAIC,CAAJ;AAAA,aAAQJ,SAASG,CAAT,EAAYC,CAAZ,CAAR;AAAA,KAAnB,EAA2C,CAA3C,CAFJ;AAGD,GAxBM","sourcesContent":["import { \n  isInfinity,\n  isNumber\n} from './isLike'\n\nimport {\n  asArray\n} from './cast'\n\nimport {\n  get\n} from './read'\n\nimport {\n  fill\n} from './reform'\n\n//reduce.spec.js\nexport const cut = function (collection, cutLength, emptyDefault, fullResult = false){\n  let data = asArray(collection); let rest\n  cutLength = isNumber(cutLength) ? cutLength : 1\n  \n  if(data.length > cutLength){\n    rest = data.splice(cutLength, Number.POSITIVE_INFINITY)\n    return fullResult === true ? [data, rest] : data\n  }\n  \n  data = fill(data, cutLength, emptyDefault)\n  return fullResult === true ? [data, []] : data\n}\n\nexport const cuts = function (collection, cutLength, emptyDefault){\n  const result = []\n  let rest = collection\n  //\n  let rowIndex = 0\n  const enumFn = typeof emptyDefault !== \"function\" ? ()=>emptyDefault : (index)=>emptyDefault(rowIndex * cutLength + index, index, rowIndex)\n  \n  do {\n    ([collection, rest] = cut(rest, cutLength, enumFn, true))\n    result.push(collection)\n    rowIndex++\n  } while(rest.length > 0)\n  return result\n}\n\n//reduce.spec.js\nexport const top = function (data, iteratee, topLength){\n  switch (typeof iteratee){\n    case \"function\":\n    //iteratee=iteratee;\n      break\n    case \"string\":\n      const path = iteratee\n      iteratee = (a, b)=>get(a, path) < get(b, path)\n      break\n    case \"boolean\":\n      iteratee = iteratee ? (a, b)=>a < b : (a, b)=>a > b\n      break\n    default:\n      iteratee = (a, b)=>a < b\n      break\n  }\n  \n  if(typeof topLength === \"boolean\"){\n    topLength = topLength ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY\n  }\n  \n  return isNumber(topLength) || isInfinity(topLength)\n    ? asArray(data).sort((a, b)=>iteratee(a, b)).splice(0, topLength)\n    : asArray(data).sort((a, b)=>iteratee(a, b))[0]\n}\n"],"file":"reduce.js"}