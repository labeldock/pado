{"version":3,"sources":["../.src/src/functions/shadow.js"],"names":["entries","it","result","forEach","v","k","push","Object","keys","key","target","filterExp","filter","parseInt","deepEntries"],"mappings":";;;;;;;;;;;;;;;;;;;;AAWO,MAAMA,UAAU,SAAVA,OAAU,CAASC,EAAT,EAAY;AACjC,QAAIC,SAAS,EAAb;;AACA,YAAO,OAAOD,EAAd;AACA,WAAK,QAAL;AACE,4BAAOA,EAAP,IAAa,CAAb,GACA,uBAAUA,EAAV,IAAgB,mBAAQA,EAAR,EAAYE,OAAZ,CAAoB,UAACC,CAAD,EAAGC,CAAH,EAAO;AAAEH,iBAAOI,IAAP,CAAY,CAACD,CAAD,EAAGD,CAAH,CAAZ;AAAoB,SAAjD,CAAhB,GACAG,OAAOC,IAAP,CAAYP,EAAZ,EAAgBE,OAAhB,CAAwB,eAAK;AAAED,iBAAOI,IAAP,CAAY,CAACG,GAAD,EAAMR,GAAGQ,GAAH,CAAN,CAAZ;AAA6B,SAA5D,CAFA;AAGA;AALF;;AAOA,WAAOP,MAAP;AACD,GAVM;;;;AAYA,MAAMM,OAAO,SAAPA,IAAO,CAASE,MAAT,EAAgBC,SAAhB,EAA0B;AAC5C,QAAIT,SAAS,EAAb;AACA,QAAIU,SAAS,OAAOD,SAAP,KAAqB,UAArB,GAAkCA,SAAlC,GAA8C;AAAA,aAAI,IAAJ;AAAA,KAA3D;AAEA,2BAAUD,MAAV,KACAH,OAAOC,IAAP,CAAYE,MAAZ,EAAoBE,MAApB,CAA2B,eAAK;AAAE,OAAC,2BAAcH,GAAd,CAAD,IAAuBG,OAAOH,GAAP,EAAWC,MAAX,CAAvB,IAA6CR,OAAOI,IAAP,CAAYO,SAASJ,GAAT,EAAa,EAAb,CAAZ,CAA7C;AAA6E,KAA/G,CADA,IAEA,wBAAWC,MAAX,KACAH,OAAOC,IAAP,CAAYE,MAAZ,EAAoBP,OAApB,CAA4B,eAAK;AAAES,aAAOH,GAAP,EAAWC,MAAX,KAAsBR,OAAOI,IAAP,CAAYG,GAAZ,CAAtB;AAAyC,KAA5E,CAHA;AAKA,WAAOP,MAAP;AACD,GAVM;;;;AAYA,MAAMY,cAAc,SAAdA,WAAc,CAASJ,MAAT,EAAgBE,MAAhB,EAAuB;AAChD,QAAG,uBAAUF,MAAV,CAAH,EAAqB,CAEpB;;AACD,QAAG,wBAAWA,MAAX,CAAH,EAAsB,CAErB;AACF,GAPM","sourcesContent":["import { \n  isNone,\n  likeArray,\n  likeObject,\n  isAbsoluteNaN\n} from './isLike'\n\nimport { \n  asArray\n} from './cast'\n\nexport const entries = function(it){\n  let result = [];\n  switch(typeof it){\n  case \"object\":\n    isNone(it) ? 0 :\n    likeArray(it) ? asArray(it).forEach((v,k)=>{ result.push([k,v]) }) :\n    Object.keys(it).forEach(key=>{ result.push([key, it[key]]) });\n    break;\n  }\n  return result;\n}\n\nexport const keys = function(target,filterExp){\n  let result = [];\n  let filter = typeof filterExp === \"function\" ? filterExp : ()=>true;\n  \n  likeArray(target) && \n  Object.keys(target).filter(key=>{ !isAbsoluteNaN(key) && filter(key,target) && result.push(parseInt(key,10)); }) || \n  likeObject(target) && \n  Object.keys(target).forEach(key=>{ filter(key,target) && result.push(key); });\n  \n  return result;\n};\n\nexport const deepEntries = function(target,filter){\n  if(likeArray(target)){\n    \n  }\n  if(likeObject(target)){\n    \n  }\n}"],"file":"shadow.js"}