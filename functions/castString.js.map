{"version":3,"sources":["../packages/pado/functions/castString.js"],"names":["baseCaseSplit","s","replace","trim","e","split","length","k","_","pascalCase","string","joinString","words","i","l","charAt","toUpperCase","slice","toLowerCase","join","camelCase","pascalCaseString","substr"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAUC,CAAV,EAAY;AAChCA,IAAAA,CAAC,GAAGA,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,EAAjB,EAAqBC,IAArB,EAAJ;AAEA,QAAIC,CAAC,GAAGH,CAAC,CAACI,KAAF,CAAQ,KAAR,CAAR;AACA,QAAGD,CAAC,CAACE,MAAF,GAAW,CAAd,EAAiB,OAAOF,CAAP;AAEjB,QAAIG,CAAC,GAAGN,CAAC,CAACI,KAAF,CAAQ,KAAR,CAAR;AACA,QAAGE,CAAC,CAACD,MAAF,GAAW,CAAd,EAAiB,OAAOC,CAAP;;AAEjB,QAAIC,CAAC,GAAGP,CAAC,CAACI,KAAF,CAAQ,KAAR,CAAR;;AACA,QAAGG,CAAC,CAACF,MAAF,GAAW,CAAd,EAAiB,OAAOE,CAAP;AAEjB,WAAOP,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyB,UAAUD,CAAV,EAAY;AAAE,oBAAYA,CAAZ;AAAiB,KAAxD,EAA0DC,OAA1D,CAAkE,OAAlE,EAA2E,EAA3E,EAA+EG,KAA/E,CAAqF,IAArF,CAAP;AACD,GAbD;;AAeO,MAAMI,UAAU,GAAG,SAAbA,UAAa,CAAUC,MAAV,EAAkBC,UAAlB,EAAkC;AAAA,QAAhBA,UAAgB;AAAhBA,MAAAA,UAAgB,GAAH,EAAG;AAAA;;AAC1D,QAAMC,KAAK,GAAGZ,aAAa,CAACU,MAAD,CAA3B;;AACA,SAAI,IAAIG,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGF,KAAK,CAACN,MAAzB,EAAiCO,CAAC,GAAGC,CAArC,EAAwCD,CAAC,EAAzC;AAA6CD,MAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACC,CAAD,CAAL,CAASE,MAAT,CAAgB,CAAhB,EAAmBC,WAAnB,KAAmCJ,KAAK,CAACC,CAAD,CAAL,CAASI,KAAT,CAAe,CAAf,EAAkBC,WAAlB,EAA9C;AAA7C;;AACA,WAAON,KAAK,CAACO,IAAN,CAAWR,UAAX,CAAP;AACD,GAJM;;;;AAMA,MAAMS,SAAS,GAAG,SAAZA,SAAY,CAAUV,MAAV,EAAkBC,UAAlB,EAAkC;AAAA,QAAhBA,UAAgB;AAAhBA,MAAAA,UAAgB,GAAH,EAAG;AAAA;;AACzD,QAAMU,gBAAgB,GAAGZ,UAAU,CAACC,MAAD,EAASC,UAAT,CAAnC;AACA,iBAAUU,gBAAgB,CAACC,MAAjB,CAAwB,CAAxB,EAA2B,CAA3B,KAAiC,EAA3C,KAAgDD,gBAAgB,CAACC,MAAjB,CAAwB,CAAxB,KAA8B,EAA9E;AACD,GAHM","sourcesContent":["const baseCaseSplit = function (s){\n  s = s.replace(/^\\#/, \"\").trim()\n\n  var e = s.split(/\\s+/)\n  if(e.length > 1) return e\n\n  var k = s.split(/\\-+/)\n  if(k.length > 1) return k\n\n  var _ = s.split(/\\_+/)\n  if(_.length > 1) return _\n\n  return s.replace(/[A-Z][a-z]/g, function (s){ return `%@${s}` }).replace(/^\\%\\@/, \"\").split(\"%@\")\n}\n\nexport const pascalCase = function (string, joinString = \"\"){\n  const words = baseCaseSplit(string)\n  for(var i = 0, l = words.length; i < l; i++) words[i] = words[i].charAt(0).toUpperCase() + words[i].slice(1).toLowerCase()\n  return words.join(joinString)\n}\n\nexport const camelCase = function (string, joinString = \"\"){\n  const pascalCaseString = pascalCase(string, joinString)\n  return `${pascalCaseString.substr(0, 1) || ''}${pascalCaseString.substr(1) || ''}`\n}\n"],"file":"castString.js"}