{"version":3,"sources":["../packages/pado/functions/data.js"],"names":["zip","keys","values","asArrayValues","reduce","dest","key","index","zips","valuesArray","map","groupBy","data","groupKey","result","forEach","datum","setKey","setValue","push"],"mappings":";;;;;;;;;;;;;;;;;;;;AAGO,MAAMA,GAAG,GAAG,SAANA,GAAM,CAACC,IAAD,EAAOC,MAAP,EAAgB;AACjC,QAAMC,aAAa,GAAG,mBAAQD,MAAR,CAAtB;AACA,WAAO,mBAAQD,IAAR,EAAcG,MAAd,CAAqB,UAACC,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAoB;AAC9CF,MAAAA,IAAI,CAACC,GAAD,CAAJ,GAAYH,aAAa,CAACI,KAAD,CAAzB;AACA,aAAOF,IAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID,GANM;;;;AAQA,MAAMG,IAAI,GAAG,SAAPA,IAAO,CAACP,IAAD,EAAOQ,WAAP;AAAA,WAAqB,mBAAQA,WAAR,EAAqBC,GAArB,CAAyB,UAAAR,MAAM;AAAA,aAAEF,GAAG,CAACC,IAAD,EAAOC,MAAP,CAAL;AAAA,KAA/B,CAArB;AAAA,GAAb,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAEO,MAAMS,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,QAAP,EAAkB;AACvC,QAAMC,MAAM,GAAG,EAAf;AAEA,uBAAQF,IAAR,EAAcG,OAAd,CAAsB,UAACC,KAAD,EAAQT,KAAR,EAAgB;AACpC,UAAMU,MAAM,GAAG,OAAOJ,QAAP,KAAoB,UAApB,GAAiCA,QAAQ,CAACG,KAAD,EAAQT,KAAR,CAAzC,GAA0DM,QAAzE;AACA,UAAMK,QAAQ,GAAG,eAAIF,KAAJ,EAAWC,MAAX,CAAjB;AACAH,MAAAA,MAAM,CAACG,MAAD,CAAN,GAAiBH,MAAM,CAACG,MAAD,CAAN,CAAeE,IAAf,CAAoBD,QAApB,CAAjB,GAAkDJ,MAAM,CAACG,MAAD,CAAN,GAAiB,CAACC,QAAD,CAAnE;AACD,KAJD;AAMA,WAAOJ,MAAP;AACD,GAVM,C,CAYP","sourcesContent":["import { asArray } from './cast'\nimport { get } from './read'\n\nexport const zip = (keys, values)=>{\n  const asArrayValues = asArray(values)\n  return asArray(keys).reduce((dest, key, index)=>{\n    dest[key] = asArrayValues[index]\n    return dest\n  }, {})\n}\n\nexport const zips = (keys, valuesArray)=>asArray(valuesArray).map(values=>zip(keys, values))\n\n//export const unzip = (ziped)=>{\n//  if(typeof ziped !== \"object\" || !ziped) return {};\n//  Object.keys(ziped).reduce((dest,zipedKey)=>{\n//    dest[0].push(zipedKey)\n//    dest[1].push(ziped[zipedKey])\n//    return dest\n//  }.[[],[]])\n//}\n//\n//export const unzips = ((zipedArray)=>asArray(zipedArray).map(ziped=>unzip(ziped))\n\nexport const groupBy = (data, groupKey)=>{\n  const result = {}\n\n  asArray(data).forEach((datum, index)=>{\n    const setKey = typeof groupKey === \"function\" ? groupKey(datum, index) : groupKey\n    const setValue = get(datum, setKey)\n    result[setKey] ? result[setKey].push(setValue) : (result[setKey] = [setValue])\n  })\n  \n  return result\n}\n\n// TODO : merge\n"],"file":"data.js"}